unit Win32.MFIdl;

// Updated to SDK 10.0.17763.0
// (c) Translation to Pascal by Norbert Sonnleitner

{$IFDEF FPC}
{$MODE delphi}
{$ENDIF}

interface

{$Z4}
{$A4}

uses
    Windows, Classes, SysUtils, ActiveX, ShlObj, ComObj,
    Win32.MFObjects, Win32.MFTransform, CMC.WTypes, CMC.PropSys;

const
    MF_DLL = 'mf.dll';
    MFPlat_DLL = 'MFPlat.dll';
    MFSENSORGROUP_DLL = 'mfsensorgroup.dll';
    xxx_dll = 'ToDo.dll';

const
    IID_IMFMediaSession: TGUID = '{90377834-21D0-4dee-8214-BA2E3E6C1127}';
    IID_IMFSourceResolver: TGUID = '{FBE5A32D-A497-4b61-BB85-97B1A848A6E3}';
    IID_IMFMediaSource: TGUID = '{279a808d-aec7-40c8-9c6b-a6b492c78a66}';
    IID_IMFMediaSourceEx: TGUID = '{3C9B2EB9-86D5-4514-A394-F56664F9F0D8}';
    IID_IMFMediaStream: TGUID = '{D182108F-4EC6-443f-AA42-A71106EC825F}';
    IID_IMFMediaSink: TGUID = '{6ef2a660-47c0-4666-b13d-cbb717f2fa2c}';
    IID_IMFStreamSink: TGUID = '{0A97B3CF-8E7C-4a3d-8F8C-0C843DC247FB}';
    IID_IMFVideoSampleAllocator: TGUID = '{86cbc910-e533-4751-8e3b-f19b5b806a03}';
    IID_IMFVideoSampleAllocatorNotify: TGUID = '{A792CDBE-C374-4e89-8335-278E7B9956A4}';
    IID_IMFVideoSampleAllocatorNotifyEx: TGUID = '{3978AA1A-6D5B-4B7F-A340-90899189AE34}';
    IID_IMFVideoSampleAllocatorCallback: TGUID = '{992388B4-3372-4f67-8B6F-C84C071F4751}';
    IID_IMFVideoSampleAllocatorEx: TGUID = '{545b3a48-3283-4f62-866f-a62d8f598f9f}';
    IID_IMFDXGIDeviceManagerSource: TGUID = '{20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce}';
    IID_IMFVideoProcessorControl: TGUID = '{A3F675D5-6119-4f7f-A100-1D8B280F0EFB}';
    IID_IMFVideoProcessorControl2: TGUID = '{BDE633D3-E1DC-4a7f-A693-BBAE399C4A20}';
    IID_IMFTopology: TGUID = '{83CF873A-F6DA-4bc8-823F-BACFD55DC433}';
    IID_IMFTopologyNode: TGUID = '{83CF873A-F6DA-4bc8-823F-BACFD55DC430}';
    IID_IMFGetService: TGUID = '{fa993888-4383-415a-a930-dd472a8cf6f7}';
    IID_IMFClock: TGUID = '{2eb1e945-18b8-4139-9b1a-d5d584818530}';
    IID_IMFPresentationClock: TGUID = '{868CE85C-8EA9-4f55-AB82-B009A910A805}';
    IID_IMFPresentationTimeSource: TGUID = '{7FF12CCE-F76F-41c2-863B-1666C8E5E139}';
    IID_IMFClockStateSink: TGUID = '{F6696E82-74F7-4f3d-A178-8A5E09C3659F}';
    IID_IMFPresentationDescriptor: TGUID = '{03cb2711-24d7-4db6-a17f-f3a7a479a536}';
    IID_IMFStreamDescriptor: TGUID = '{56c03d9c-9dbb-45f5-ab4b-d80f47c05938}';
    IID_IMFMediaTypeHandler: TGUID = '{e93dcf6c-4b07-4e1e-8123-aa16ed6eadf5}';
    IID_IMFTimer: TGUID = '{e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2}';
    IID_IMFShutdown: TGUID = '{97ec2ea4-0e42-4937-97ac-9d6d328824e1}';
    IID_IMFTopoLoader: TGUID = '{DE9A6157-F660-4643-B56A-DF9F7998C7CD}';
    IID_IMFContentProtectionManager: TGUID = '{ACF92459-6A61-42bd-B57C-B43E51203CB0}';
    IID_IMFContentEnabler: TGUID = '{D3C4EF59-49CE-4381-9071-D5BCD044C770}';
    IID_IMFRateSupport: TGUID = '{0a9ccdbc-d797-4563-9667-94ec5d79292d}';
    IID_IMFRateControl: TGUID = '{88ddcd21-03c3-4275-91ed-55ee3929328f}';
    IID_IMFTimecodeTranslate: TGUID = '{ab9d8661-f7e8-4ef4-9861-89f334f94e74}';
    IID_IMFSeekInfo: TGUID = '{26AFEA53-D9ED-42B5-AB80-E64F9EE34779}';
    IID_IMFSimpleAudioVolume: TGUID = '{089EDF13-CF71-4338-8D13-9E569DBDC319}';
    IID_IMFMetadata: TGUID = '{F88CFB8C-EF16-4991-B450-CB8C69E51704}';
    IID_IMFMetadataProvider: TGUID = '{56181D2D-E221-4adb-B1C8-3CEE6A53F76F}';
    IID_IMFAudioStreamVolume: TGUID = '{76B1BBDB-4EC8-4f36-B106-70A9316DF593}';
    IID_IMFAudioPolicy: TGUID = '{a0638c2b-6465-4395-9ae7-a321a9fd2856}';
    IID_IMFSampleGrabberSinkCallback: TGUID = '{8C7B80BF-EE42-4b59-B1DF-55668E1BDCA8}';
    IID_IMFSampleGrabberSinkCallback2: TGUID = '{ca86aa50-c46e-429e-ab27-16d6ac6844cb}';
    IID_IMFWorkQueueServices: TGUID = '{35FE1BB8-A3A9-40fe-BBEC-EB569C9CCCA3}';
    IID_IMFWorkQueueServicesEx: TGUID = '{96bf961b-40fe-42f1-ba9d-320238b49700}';
    IID_IMFQualityManager: TGUID = '{8D009D86-5B9F-4115-B1FC-9F80D52AB8AB}';
    IID_IMFQualityAdvise: TGUID = '{EC15E2E9-E36B-4f7c-8758-77D452EF4CE7}';
    IID_IMFQualityAdvise2: TGUID = '{F3706F0D-8EA2-4886-8000-7155E9EC2EAE}';
    IID_IMFQualityAdviseLimits: TGUID = '{dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9}';
    IID_IMFRealTimeClient: TGUID = '{2347D60B-3FB5-480c-8803-8DF3ADCD3EF0}';
    IID_IMFRealTimeClientEx: TGUID = '{03910848-AB16-4611-B100-17B88AE2F248}';
    IID_IMFSequencerSource: TGUID = '{197CD219-19CB-4de1-A64C-ACF2EDCBE59E}';
    IID_IMFMediaSourceTopologyProvider: TGUID = '{0E1D6009-C9F3-442d-8C51-A42D2D49452F}';
    IID_IMFMediaSourcePresentationProvider: TGUID = '{0E1D600a-C9F3-442d-8C51-A42D2D49452F}';
    IID_IMFTopologyNodeAttributeEditor: TGUID = '{676aa6dd-238a-410d-bb99-65668d01605a}';
    IID_IMFByteStreamBuffering: TGUID = '{6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e}';
    IID_IMFByteStreamCacheControl: TGUID = '{F5042EA4-7A96-4a75-AA7B-2BE1EF7F88D5}';
    IID_IMFByteStreamTimeSeek: TGUID = '{64976BFA-FB61-4041-9069-8C9A5F659BEB}';
    IID_IMFByteStreamCacheControl2: TGUID = '{71CE469C-F34B-49EA-A56B-2D2A10E51149}';
    IID_IMFNetCredential: TGUID = '{5b87ef6a-7ed8-434f-ba0e-184fac1628d1}';
    IID_IMFNetCredentialManager: TGUID = '{5b87ef6b-7ed8-434f-ba0e-184fac1628d1}';
    IID_IMFNetCredentialCache: TGUID = '{5b87ef6c-7ed8-434f-ba0e-184fac1628d1}';
    IID_IMFSSLCertificateManager: TGUID = '{61f7d887-1230-4a8b-aeba-8ad434d1a64d}';
    IID_IMFNetResourceFilter: TGUID = '{091878a3-bf11-4a5c-bc9f-33995b06ef2d}';
    IID_IMFSourceOpenMonitor: TGUID = '{059054B3-027C-494C-A27D-9113291CF87F}';
    IID_IMFNetProxyLocator: TGUID = '{e9cd0383-a268-4bb4-82de-658d53574d41}';
    IID_IMFNetProxyLocatorFactory: TGUID = '{e9cd0384-a268-4bb4-82de-658d53574d41}';
    IID_IMFSaveJob: TGUID = '{e9931663-80bf-4c6e-98af-5dcf58747d1f}';
    IID_IMFNetSchemeHandlerConfig: TGUID = '{7BE19E73-C9BF-468a-AC5A-A5E8653BEC87}';
    IID_IMFSchemeHandler: TGUID = '{6D4C7B74-52A0-4bb7-B0DB-55F29F47A668}';
    IID_IMFByteStreamHandler: TGUID = '{BB420AA4-765B-4a1f-91FE-D6A8A143924C}';
    IID_IMFTrustedInput: TGUID = '{542612C4-A1B8-4632-B521-DE11EA64A0B0}';
    IID_IMFInputTrustAuthority: TGUID = '{D19F8E98-B126-4446-890C-5DCB7AD71453}';
    IID_IMFTrustedOutput: TGUID = '{D19F8E95-B126-4446-890C-5DCB7AD71453}';
    IID_IMFOutputTrustAuthority: TGUID = '{D19F8E94-B126-4446-890C-5DCB7AD71453}';
    IID_IMFOutputPolicy: TGUID = '{7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C}';
    IID_IMFSecureChannel: TGUID = '{d0ae555d-3b12-4d97-b060-0990bc5aeb67}';
    IID_IMFSampleProtection: TGUID = '{8e36395f-c7b9-43c4-a54d-512b4af63c95}';
    IID_IMFMediaSinkPreroll: TGUID = '{5dfd4b2a-7674-4110-a4e6-8a68fd5f3688}';
    IID_IMFFinalizableMediaSink: TGUID = '{EAECB74A-9A50-42ce-9541-6A7F57AA4AD7}';
    IID_IMFStreamingSinkConfig: TGUID = '{9db7aa41-3cc5-40d4-8509-555804ad34cc}';
    IID_IMFRemoteProxy: TGUID = '{994e23ad-1cc2-493c-b9fa-46f1cb040fa4}';
    IID_IMFOutputSchema: TGUID = '{7BE0FC5B-ABD9-44FB-A5C8-F50136E71599}';
    IID_IMFProtectedEnvironmentAccess: TGUID = '{ef5dc845-f0d9-4ec9-b00c-cb5183d38434}';
    IID_IMFSignedLibrary: TGUID = '{4a724bca-ff6a-4c07-8e0d-7a358421cf06}';
    IID_IMFSystemId: TGUID = '{fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a}';
    IID_IMFContentProtectionDevice: TGUID = '{E6257174-A060-4C9A-A088-3B1B471CAD28}';
    IID_IMFContentDecryptorContext: TGUID = '{7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB}';
    IID_IMFFieldOfUseMFTUnlock: TGUID = '{508E71D3-EC66-4fc3-8775-B4B9ED6BA847}';
    IID_IMFLocalMFTRegistration: TGUID = '{149c4d73-b4be-4f8d-8b87-079e926b6add}';
    IID_IMFPMPHostApp: TGUID = '{84d2054a-3aa1-4728-a3b0-440a418cf49c}';
    IID_IMFPMPClientApp: TGUID = '{c004f646-be2c-48f3-93a2-a0983eba1108}';
    IID_IMFMediaStreamSourceSampleRequest: TGUID = '{380b9af9-a85b-4e78-a2af-ea5ce645c6b4}';
    IID_IMFTrackedSample: TGUID = '{245BF8E9-0755-40f7-88A5-AE0F18D55E17}';
    IID_IMFRemoteDesktopPlugin: TGUID = '{1cde6309-cae0-4940-907e-c1ec9c3d1d4a}';
    IID_IMFSAMIStyle: TGUID = '{A7E025DD-5303-4a62-89D6-E747E1EFAC73}';
    IID_IMFTranscodeProfile: TGUID = '{4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E}';
    IID_IMFTranscodeSinkInfoProvider: TGUID = '{8CFFCD2E-5A03-4a3a-AFF7-EDCD107C620E}';
    IID_IMFObjectReferenceStream: TGUID = '{09EF5BE3-C8A7-469e-8B70-73BF25BB193F}';
    IID_IMFPMPHost: TGUID = '{F70CA1A9-FDC7-4782-B994-ADFFB1C98606}';
    IID_IMFPMPClient: TGUID = '{6C4E655D-EAD8-4421-B6B9-54DCDBBDF820}';
    IID_IMFPMPServer: TGUID = '{994e23af-1cc2-493c-b9fa-46f1cb040fa4}';
    IID_IMFClockConsumer: TGUID = '{6ef2a662-47c0-4666-b13d-cbb717f2fa2c}';
    IID_IMFVideoProcessorControl3: TGUID = '{2424B3F2-EB23-40f1-91AA-74BDDEEA0883}';

    IID_IMFCapturePhotoConfirmation: TGUID = '{19f68549-ca8a-4706-a4ef-481dbc95e12c}';
    IID_IMFNetCrossOriginSupport: TGUID = '{bc2b7d44-a72d-49d5-8376-1480dee58b22}';
    IID_IMFHttpDownloadRequest: TGUID = '{F779FDDF-26E7-4270-8A8B-B983D1859DE0}';
    IID_IMFHttpDownloadSession: TGUID = '{71FA9A2C-53CE-4662-A132-1A7E8CBF62DB}';
    IID_IMFHttpDownloadSessionProvider: TGUID = '{1B4CF4B9-3A16-4115-839D-03CC5C99DF01}';
    IID_IMFMediaSource2: TGUID = '{FBB03414-D13B-4786-8319-5AC51FC0A136}';
    IID_IMFMediaStream2: TGUID = '{C5BC37D6-75C7-46A1-A132-81B5F723C20F}';
    IID_IMFSensorDevice: TGUID = '{FB9F48F2-2A18-4E28-9730-786F30F04DC4}';
    IID_IMFSensorGroup: TGUID = '{4110243A-9757-461F-89F1-F22345BCAB4E}';
    IID_IMFSensorStream: TGUID = '{E9A42171-C56E-498A-8B39-EDA5A070B7FC}';
    IID_IMFSensorTransformFactory: TGUID = '{EED9C2EE-66B4-4F18-A697-AC7D3960215C}';
    IID_IMFSensorProfile: TGUID = '{22F765D1-8DAB-4107-846D-56BAF72215E7}';
    IID_IMFSensorProfileCollection: TGUID = '{C95EA55B-0187-48BE-9353-8D2507662351}';
    IID_IMFSensorProcessActivity: TGUID = '{39DC7F4A-B141-4719-813C-A7F46162A2B8}';
    IID_IMFSensorActivityReport: TGUID = '{3E8C4BE1-A8C2-4528-90DE-2851BDE5FEAD}';
    IID_IMFSensorActivitiesReport: TGUID = '{683F7A5E-4A19-43CD-B1A9-DBF4AB3F7777}';
    IID_IMFSensorActivitiesReportCallback: TGUID = '{DE5072EE-DBE3-46DC-8A87-B6F631194751}';
    IID_IMFSensorActivityMonitor: TGUID = '{D0CEF145-B3F4-4340-A2E5-7A5080CA05CB}';
    IID_IMFExtendedCameraIntrinsicModel: TGUID = '{5C595E64-4630-4231-855A-12842F733245}';
    IID_IMFExtendedCameraIntrinsicsDistortionModel6KT: TGUID = '{74C2653B-5F55-4EB1-9F0F-18B8F68B7D3D}';
    IID_IMFExtendedCameraIntrinsicsDistortionModelArcTan: TGUID = '{812D5F95-B572-45DC-BAFC-AE24199DDDA8}';
    IID_IMFExtendedCameraIntrinsics: TGUID = '{687F6DAC-6987-4750-A16A-734D1E7A10FE}';



const
    MF_WVC1_PROG_SINGLE_SLICE_CONTENT: TGUID = '{67EC2559-0F2F-4420-A4DD-2F8EE7A5738B}';
    MF_PROGRESSIVE_CODING_CONTENT: TGUID = '{8F020EEA-1508-471F-9DA6-507D7CFA40DB}';
    MF_NALU_LENGTH_SET: TGUID = '{A7911D53-12A4-4965-AE70-6EADD6FF0551}';
    MF_NALU_LENGTH_INFORMATION: TGUID = '{19124E7C-AD4B-465F-BB18-20186287B6AF}';
    MF_USER_DATA_PAYLOAD: TGUID = '{d1d4985d-dc92-457a-b3a0-651a33a31047}';
    MF_MPEG4SINK_SPSPPS_PASSTHROUGH: TGUID = '{5601a134-2005-4ad2-b37d-22a6c554deb2}';
    MF_MPEG4SINK_MOOV_BEFORE_MDAT: TGUID = '{f672e3ac-e1e6-4f10-b5ec-5f3b30828816}';
    MF_MPEG4SINK_MINIMUM_PROPERTIES_SIZE: TGUID = '{dca1ed52-450e-4a22-8c62-4ed452f7a187}';

    MF_SESSION_TOPOLOADER: TGUID = '{1e83d482-1f1c-4571-8405-88f4b2181f71}';
    MF_SESSION_GLOBAL_TIME: TGUID = '{1e83d482-1f1c-4571-8405-88f4b2181f72}';
    MF_SESSION_QUALITY_MANAGER: TGUID = '{1e83d482-1f1c-4571-8405-88f4b2181f73}';
    MF_SESSION_CONTENT_PROTECTION_MANAGER: TGUID = '{1e83d482-1f1c-4571-8405-88f4b2181f74}';
    MF_SESSION_SERVER_CONTEXT: TGUID = '{afe5b291-50fa-46e8-b9be-0c0c3ce4b3a5}';
    MF_SESSION_REMOTE_SOURCE_MODE: TGUID = '{f4033ef4-9bb3-4378-941f-85a0856bc244}';
    MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME: TGUID = '{190e852f-6238-42d1-b5af-69ea338ef850}';
    MF_PMP_SERVER_CONTEXT: TGUID = '{2f00c910-d2cf-4278-8b6a-d077fac3a25f}';

    MF_TIME_FORMAT_ENTRY_RELATIVE: TGUID = '{4399f178-46d3-4504-afda-20d32e9ba360}';
    MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION: TGUID = '{a38253aa-6314-42fd-a3ce-bb27b6859946}';
    MF_STREAM_SINK_SUPPORTS_HW_CONNECTION: TGUID = '{9b465cbf-0597-4f9e-9f3c-b97eeef90359}';
    MF_STREAM_SINK_SUPPORTS_ROTATION: TGUID = '{b3e96280-bd05-41a5-97ad-8a7fee24b912}';

    MF_SINK_VIDEO_PTS: TGUID = '{2162bde7-421e-4b90-9b33-e58fbf1d58b6}';
    MF_SINK_VIDEO_NATIVE_WIDTH: TGUID = '{e6d6a707-1505-4747-9b10-72d2d158cb3a}';
    MF_SINK_VIDEO_NATIVE_HEIGHT: TGUID = '{f0ca6705-490c-43e8-941c-c0b3206b9a65}';
    MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_NUMERATOR: TGUID = '{d0f33b22-b78a-4879-b455-f03ef3fa82cd}';
    MF_SINK_VIDEO_DISPLAY_ASPECT_RATIO_DENOMINATOR: TGUID = '{6ea1eb97-1fe0-4f10-a6e4-1f4f661564e0}';
    MF_BD_MVC_PLANE_OFFSET_METADATA: TGUID = '{62a654e4-b76c-4901-9823-2cb615d47318}';
    MF_LUMA_KEY_ENABLE: TGUID = '{7369820f-76de-43ca-9284-47b8f37e0649}';
    MF_LUMA_KEY_LOWER: TGUID = '{93d7b8d5-0b81-4715-aea0-8725871621e9}';
    MF_LUMA_KEY_UPPER: TGUID = '{d09f39bb-4602-4c31-a706-a12171a5110a}';
    MF_USER_EXTENDED_ATTRIBUTES: TGUID = '{c02abac6-feb2-4541-922f-920b43702722}';
    MF_INDEPENDENT_STILL_IMAGE: TGUID = '{ea12af41-0710-42c9-a127-daa3e78483a5}';

    MF_TOPOLOGY_PROJECTSTART: TGUID = '{7ed3f802-86bb-4b3f-b7e4-7cb43afd4b80}';
    MF_TOPOLOGY_PROJECTSTOP: TGUID = '{7ed3f803-86bb-4b3f-b7e4-7cb43afd4b80}';
    MF_TOPOLOGY_NO_MARKIN_MARKOUT: TGUID = '{7ed3f804-86bb-4b3f-b7e4-7cb43afd4b80}';
    MF_TOPOLOGY_DXVA_MODE: TGUID = '{1e8d34f6-f5ab-4e23-bb88-874aa3a1a74d}';
    MF_TOPOLOGY_ENABLE_XVP_FOR_PLAYBACK: TGUID = '{1967731f-cd78-42fc-b026-0992a56e5693}';
    MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS: TGUID = '{b86cac42-41a6-4b79-897a-1ab0e52b4a1b}';
    MF_TOPOLOGY_PLAYBACK_MAX_DIMS: TGUID = '{5715cf19-5768-44aa-ad6e-8721f1b0f9bb}';
    MF_TOPOLOGY_HARDWARE_MODE: TGUID = '{d2d362fd-4e4f-4191-a579-c618b66706af}';
    MF_TOPOLOGY_PLAYBACK_FRAMERATE: TGUID = '{c164737a-c2b1-4553-83bb-5a526072448f}';
    MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED: TGUID = '{d529950b-d484-4527-a9cd-b1909532b5b0}';
    MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES: TGUID = '{6248c36d-5d0b-4f40-a0bb-b0b305f77698}';
    MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH: TGUID = '{c8cc113f-7951-4548-aad6-9ed6202e62b3}';
    MF_DISABLE_LOCALLY_REGISTERED_PLUGINS: TGUID = '{66b16da9-add4-47e0-a16b-5af1fb483634}';
    MF_LOCAL_PLUGIN_CONTROL_POLICY: TGUID = '{d91b0085-c86d-4f81-8822-8c68e1d7fa04}';
    MF_TOPONODE_FLUSH: TGUID = '{494bbce8-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_DRAIN: TGUID = '{494bbce9-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_D3DAWARE: TGUID = '{494bbced-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPOLOGY_RESOLUTION_STATUS: TGUID = '{494bbcde-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_ERRORCODE: TGUID = '{494bbcee-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_CONNECT_METHOD: TGUID = '{494bbcf1-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_LOCKED: TGUID = '{494bbcf7-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_WORKQUEUE_ID: TGUID = '{494bbcf8-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_WORKQUEUE_MMCSS_CLASS: TGUID = '{494bbcf9-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_DECRYPTOR: TGUID = '{494bbcfa-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_DISCARDABLE: TGUID = '{494bbcfb-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_ERROR_MAJORTYPE: TGUID = '{494bbcfd-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_ERROR_SUBTYPE: TGUID = '{494bbcfe-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_WORKQUEUE_MMCSS_TASKID: TGUID = '{494bbcff-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY: TGUID = '{5001f840-2816-48f4-9364-ad1ef661a123}';
    MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY: TGUID = '{a1ff99be-5e97-4a53-b494-568c642c0ff3}';
    MF_TOPONODE_MARKIN_HERE: TGUID = '{494bbd00-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_MARKOUT_HERE: TGUID = '{494bbd01-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_DECODER: TGUID = '{494bbd02-b031-4e38-97c4-d5422dd618dc}';
    MF_TOPONODE_MEDIASTART: TGUID = '{835c58ea-e075-4bc7-bcba-4de000df9ae6}';
    MF_TOPONODE_MEDIASTOP: TGUID = '{835c58eb-e075-4bc7-bcba-4de000df9ae6}';
    MF_TOPONODE_SOURCE: TGUID = '{835c58ec-e075-4bc7-bcba-4de000df9ae6}';
    MF_TOPONODE_PRESENTATION_DESCRIPTOR: TGUID = '{835c58ed-e075-4bc7-bcba-4de000df9ae6}';
    MF_TOPONODE_STREAM_DESCRIPTOR: TGUID = '{835c58ee-e075-4bc7-bcba-4de000df9ae6}';
    MF_TOPONODE_SEQUENCE_ELEMENTID: TGUID = '{835c58ef-e075-4bc7-bcba-4de000df9ae6}';
    MF_TOPONODE_TRANSFORM_OBJECTID: TGUID = '{88dcc0c9-293e-4e8b-9aeb-0ad64cc016b0}';
    MF_TOPONODE_STREAMID: TGUID = '{14932f9b-9087-4bb4-8412-5167145cbe04}';
    MF_TOPONODE_NOSHUTDOWN_ON_REMOVE: TGUID = '{14932f9c-9087-4bb4-8412-5167145cbe04}';
    MF_TOPONODE_RATELESS: TGUID = '{14932f9d-9087-4bb4-8412-5167145cbe04}';
    MF_TOPONODE_DISABLE_PREROLL: TGUID = '{14932f9e-9087-4bb4-8412-5167145cbe04}';
    MF_TOPONODE_PRIMARYOUTPUT: TGUID = '{6304ef99-16b2-4ebe-9d67-e4c539b3a259}';

    MF_PD_PMPHOST_CONTEXT: TGUID = '{6c990d31-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_APP_CONTEXT: TGUID = '{6c990d32-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_DURATION: TGUID = '{6c990d33-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_TOTAL_FILE_SIZE: TGUID = '{6c990d34-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_AUDIO_ENCODING_BITRATE: TGUID = '{6c990d35-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_VIDEO_ENCODING_BITRATE: TGUID = '{6c990d36-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_MIME_TYPE: TGUID = '{6c990d37-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_LAST_MODIFIED_TIME: TGUID = '{6c990d38-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_PLAYBACK_ELEMENT_ID: TGUID = '{6c990d39-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_PREFERRED_LANGUAGE: TGUID = '{6c990d3A-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_PLAYBACK_BOUNDARY_TIME: TGUID = '{6c990d3b-bb8e-477a-8598-0d5d96fcd88a}';
    MF_PD_AUDIO_ISVARIABLEBITRATE: TGUID = '{33026ee0-e387-4582-ae0a-34a2ad3baa18}';
    MF_PD_ADAPTIVE_STREAMING: TGUID = '{EA0D5D97-29F9-488B-AE6B-7D6B4136112B}';

    MF_SD_LANGUAGE: TGUID = '{00af2180-bdc2-423c-abca-f503593bc121}';
    MF_SD_PROTECTED: TGUID = '{00af2181-bdc2-423c-abca-f503593bc121}';
    MF_SD_STREAM_NAME: TGUID = '{4f1b099d-d314-41e5-a781-7fefaa4c501f}';
    MF_SD_MUTUALLY_EXCLUSIVE: TGUID = '{023ef79c-388d-487f-ac17-696cd6e3c6f5}';

    MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID: TGUID = '{ba491360-be50-451e-95ab-6d4accc7dad8}';
    MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE: TGUID = '{ba491361-be50-451e-95ab-6d4accc7dad8}';
    MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS: TGUID = '{ba491362-be50-451e-95ab-6d4accc7dad8}';
    MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID: TGUID = '{ba491364-be50-451e-95ab-6d4accc7dad8}';
    MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE: TGUID = '{ba491365-be50-451e-95ab-6d4accc7dad8}';
    MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS: TGUID = '{ba491366-be50-451e-95ab-6d4accc7dad8}';

    MF_ACTIVATE_MFT_LOCKED: TGUID = '{c1f6093c-7f65-4fbd-9e39-5faec3c4fbd7}';
    MF_ACTIVATE_VIDEO_WINDOW: TGUID = '{9a2dbbdd-f57e-4162-82b9-6831377682d3}';

    MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS: TGUID = '{ede4b5e0-f805-4d6c-99b3-db01bf95dfab}';

    MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID: TGUID = '{ede4b5e3-f805-4d6c-99b3-db01bf95dfab}';
    MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID: TGUID = '{b10aaec3-ef71-4cc3-b873-05a9a08b9f8e}';
    MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE: TGUID = '{6ba644ff-27c5-4d02-9887-c28619fdb91b}';
    MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY: TGUID = '{a9770471-92ec-4df4-94fe-81c36f0c3a7a}';

    MFENABLETYPE_WMDRMV1_LicenseAcquisition: TGUID = '{4ff6eeaf-0b43-4797-9b85-abf31815e7b0}';
    MFENABLETYPE_WMDRMV7_LicenseAcquisition: TGUID = '{003306df-4a06-4884-a097-ef6d22ec84a3}';
    MFENABLETYPE_WMDRMV7_Individualization: TGUID = '{acd2c84a-b303-4f65-bc2c-2c848d01a989}';
    MFENABLETYPE_MF_UpdateRevocationInformation: TGUID = '{e558b0b5-b3c4-44a0-924c-50d178932385}';
    MFENABLETYPE_MF_UpdateUntrustedComponent: TGUID = '{9879f3d6-cee2-48e6-b573-9767ab172f16}';
    MFENABLETYPE_MF_RebootRequired: TGUID = '{6d4d3d4b-0ece-4652-8b3a-f2d24260d887}';

    MF_METADATA_PROVIDER_SERVICE: TGUID = '{db214084-58a4-4d2e-b84f-6f755b2f7a0d}';
    MF_PROPERTY_HANDLER_SERVICE: TGUID = '{a3face02-32b8-41dd-90e7-5fef7c8991b5}';
    MF_RATE_CONTROL_SERVICE: TGUID = '{866fa297-b802-4bf8-9dc9-5e3b6a9f53c9}';
    MF_TIMECODE_SERVICE: TGUID = '{a0d502a7-0eb3-4885-b1b9-9feb0d083454}';
    MR_POLICY_VOLUME_SERVICE: TGUID = '{1abaa2ac-9d3b-47c6-ab48-c59506de784d}';
    MR_CAPTURE_POLICY_VOLUME_SERVICE: TGUID = '{24030acd-107a-4265-975c-414e33e65f2a}';
    MR_STREAM_VOLUME_SERVICE: TGUID = '{f8b5fa2f-32ef-46f5-b172-1321212fb2c4}';
    MR_AUDIO_POLICY_SERVICE: TGUID = '{911fd737-6775-4ab0-a614-297862fdac88}';
    MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET: TGUID = '{62e3d776-8100-4e03-a6e8-bd3857ac9c47}';
    MF_SAMPLEGRABBERSINK_IGNORE_CLOCK: TGUID = '{0efda2c0-2b69-4e2e-ab8d-46dcbff7d25d}';
    MF_QUALITY_SERVICES: TGUID = '{b7e2be11-2f96-4640-b52c-282365bdf16c}';
    MF_WORKQUEUE_SERVICES: TGUID = '{8e37d489-41e0-413a-9068-287c886d8dda}';
    MF_QUALITY_NOTIFY_PROCESSING_LATENCY: TGUID = '{f6b44af8-604d-46fe-a95d-45479b10c9bc}';
    MF_QUALITY_NOTIFY_SAMPLE_LAG: TGUID = '{30d15206-ed2a-4760-be17-eb4a9f12295c}';
    MF_TIME_FORMAT_SEGMENT_OFFSET: TGUID = '{c8b8be77-869c-431d-812e-169693f65a39}';
    MF_SOURCE_PRESENTATION_PROVIDER_SERVICE: TGUID = '{e002aadc-f4af-4ee5-9847-053edf840426}';
    MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE: TGUID = '{65656e1a-077f-4472-83ef-316f11d5087a}';
    MFNETSOURCE_SSLCERTIFICATE_MANAGER: TGUID = '{55e6cb27-e69b-4267-940c-2d7ec5bb8a0f}';
    MFNETSOURCE_RESOURCE_FILTER: TGUID = '{815d0ff6-265a-4477-9e46-7b80ad80b5fb}';
    MFNET_SAVEJOB_SERVICE: TGUID = '{b85a587f-3d02-4e52-9565-55d3ec1e7ff7}';
    MFNETSOURCE_STATISTICS_SERVICE: TGUID = '{3cb1f275-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_STATISTICS: TGUID = '{3cb1f274-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_BUFFERINGTIME: TGUID = '{3cb1f276-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ACCELERATEDSTREAMINGDURATION: TGUID = '{3cb1f277-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_MAXUDPACCELERATEDSTREAMINGDURATION: TGUID = '{4aab2879-bbe1-4994-9ff0-5495bd250129}';
    MFNETSOURCE_MAXBUFFERTIMEMS: TGUID = '{408b24e6-4038-4401-b5b2-fe701a9ebf10}';
    MFNETSOURCE_CONNECTIONBANDWIDTH: TGUID = '{3cb1f278-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_CACHEENABLED: TGUID = '{3cb1f279-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_AUTORECONNECTLIMIT: TGUID = '{3cb1f27a-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_RESENDSENABLED: TGUID = '{3cb1f27b-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_THINNINGENABLED: TGUID = '{3cb1f27c-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROTOCOL: TGUID = '{3cb1f27d-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_TRANSPORT: TGUID = '{3cb1f27e-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PREVIEWMODEENABLED: TGUID = '{3cb1f27f-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_CREDENTIAL_MANAGER: TGUID = '{3cb1f280-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PPBANDWIDTH: TGUID = '{3cb1f281-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_AUTORECONNECTPROGRESS: TGUID = '{3cb1f282-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYLOCATORFACTORY: TGUID = '{3cb1f283-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_BROWSERUSERAGENT: TGUID = '{3cb1f28b-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_BROWSERWEBPAGE: TGUID = '{3cb1f28c-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PLAYERVERSION: TGUID = '{3cb1f28d-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PLAYERID: TGUID = '{3cb1f28e-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_HOSTEXE: TGUID = '{3cb1f28f-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_HOSTVERSION: TGUID = '{3cb1f291-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PLAYERUSERAGENT: TGUID = '{3cb1f292-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_CLIENTGUID: TGUID = '{60a2c4a6-f197-4c14-a5bf-88830d2458af}';
    MFNETSOURCE_LOGURL: TGUID = '{3cb1f293-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_UDP: TGUID = '{3cb1f294-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_TCP: TGUID = '{3cb1f295-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_MSB: TGUID = '{3cb1f296-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_RTSP: TGUID = '{3cb1f298-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_HTTP: TGUID = '{3cb1f299-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_STREAMING: TGUID = '{3cb1f29c-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_DOWNLOAD: TGUID = '{3cb1f29d-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_ENABLE_PRIVATEMODE: TGUID = '{824779d8-f18b-4405-8cf1-464fb5aa8f71}';
    MFNETSOURCE_UDP_PORT_RANGE: TGUID = '{3cb1f29a-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYINFO: TGUID = '{3cb1f29b-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_DRMNET_LICENSE_REPRESENTATION: TGUID = '{47eae1bd-bdfe-42e2-82f3-54a48c17962d}';
    MFNETSOURCE_PROXYSETTINGS: TGUID = '{3cb1f287-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYHOSTNAME: TGUID = '{3cb1f284-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYPORT: TGUID = '{3cb1f288-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYEXCEPTIONLIST: TGUID = '{3cb1f285-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYBYPASSFORLOCAL: TGUID = '{3cb1f286-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_PROXYRERUNAUTODETECTION: TGUID = '{3cb1f289-0505-4c5d-ae71-0a556344efa1}';
    MFNETSOURCE_STREAM_LANGUAGE: TGUID = '{9ab44318-f7cd-4f2d-8d6d-fa35b492cecb}';
    MFNETSOURCE_LOGPARAMS: TGUID = '{64936ae8-9418-453a-8cda-3e0a668b353b}';
    MFNETSOURCE_PEERMANAGER: TGUID = '{48b29adb-febf-45ee-a9bf-efb81c492efc}';
    MFNETSOURCE_FRIENDLYNAME: TGUID = '{5b2a7757-bc6b-447e-aa06-0dda1c646e2f}';

    MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE: TGUID = '{a6e1f733-3001-4915-8150-1558a2180ec8}';
    MF_BYTESTREAM_SERVICE: TGUID = '{ab025e2b-16d9-4180-a127-ba6c70156161}';
    MF_MEDIA_PROTECTION_MANAGER_PROPERTIES: TGUID = '{38BD81A9-ACEA-4C73-89B2-5532C0AECA79}';

    MFCONNECTOR_SPDIF: TGUID = '{0b94a712-ad3e-4cee-83ce-ce32e3db6522}';
    MFCONNECTOR_UNKNOWN: TGUID = '{ac3aef5c-ce43-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_PCI: TGUID = '{ac3aef5d-ce43-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_PCIX: TGUID = '{ac3aef5e-ce43-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_PCI_Express: TGUID = '{ac3aef5f-ce43-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_AGP: TGUID = '{ac3aef60-ce43-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_VGA: TGUID = '{57cd5968-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_SVIDEO: TGUID = '{57cd5969-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_COMPOSITE: TGUID = '{57cd596a-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_COMPONENT: TGUID = '{57cd596b-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_DVI: TGUID = '{57cd596c-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_HDMI: TGUID = '{57cd596d-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_LVDS: TGUID = '{57cd596e-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_D_JPN: TGUID = '{57cd5970-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_SDI: TGUID = '{57cd5971-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_DISPLAYPORT_EXTERNAL: TGUID = '{57cd5972-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_DISPLAYPORT_EMBEDDED: TGUID = '{57cd5973-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_UDI_EXTERNAL: TGUID = '{57cd5974-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_UDI_EMBEDDED: TGUID = '{57cd5975-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_MIRACAST: TGUID = '{57cd5977-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_A: TGUID = '{57cd5978-ce47-11d9-92db-000bdb28ff98}';
    MFCONNECTOR_TRANSPORT_AGNOSTIC_DIGITAL_MODE_B: TGUID = '{57cd5979-ce47-11d9-92db-000bdb28ff98}';

    MFPROTECTION_DISABLE: TGUID = '{8cc6d81b-fec6-4d8f-964b-cfba0b0dad0d}';
    MFPROTECTION_CONSTRICTVIDEO: TGUID = '{193370ce-c5e4-4c3a-8a66-6959b4da4442}';
    MFPROTECTION_CONSTRICTVIDEO_NOOPM: TGUID = '{a580e8cd-c247-4957-b983-3c2eebd1ff59}';
    MFPROTECTION_CONSTRICTAUDIO: TGUID = '{ffc99b44-df48-4e16-8e66-096892c1578a}';
    MFPROTECTION_TRUSTEDAUDIODRIVERS: TGUID = '{65bdf3d2-0168-4816-a533-55d47b027101}';
    MFPROTECTION_HDCP: TGUID = '{AE7CC03D-C828-4021-acb7-d578d27aaf13}';
    MFPROTECTION_CGMSA: TGUID = '{E57E69E9-226B-4d31-B4E3-D3DB008736DD}';
    MFPROTECTION_ACP: TGUID = '{c3fd11c6-f8b7-4d20-b008-1db17d61f2da}';
    MFPROTECTION_WMDRMOTA: TGUID = '{a267a6a1-362e-47d0-8805-4628598a23e4}';
    MFPROTECTION_FFT: TGUID = '{462a56b2-2866-4bb6-980d-6d8d9edb1a8c}';
    MFPROTECTION_PROTECTED_SURFACE: TGUID = '{4f5d9566-e742-4a25-8d1f-d287b5fa0ade}';
    MFPROTECTION_DISABLE_SCREEN_SCRAPE: TGUID = '{a21179a4-b7cd-40d8-9614-8ef2371ba78d}';
    MFPROTECTION_VIDEO_FRAMES: TGUID = '{36a59cbc-7401-4a8c-bc20-46a7c9e597f0}';
    MFPROTECTION_HARDWARE: TGUID = '{4ee7f0c1-9ed7-424f-b6be-996b33528856}';
    MFPROTECTION_HDCP_WITH_TYPE_ENFORCEMENT: TGUID = '{a4a585e8-ed60-442d-814d-db4d4220a06d}';

    MFPROTECTIONATTRIBUTE_BEST_EFFORT: TGUID = '{c8e06331-75f0-4ec1-8e77-17578f773b46}';
    MFPROTECTIONATTRIBUTE_FAIL_OVER: TGUID = '{8536abc5-38f1-4151-9cce-f55d941229ac}';
    MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION: TGUID = '{c873de64-d8a5-49e6-88bb-fb963fd3d4ce}';
    MFPROTECTIONATTRIBUTE_CONSTRICTVIDEO_IMAGESIZE: TGUID = '{008476fc-4b58-4d80-a790-e7297673161d}';
    MFPROTECTIONATTRIBUTE_HDCP_SRM: TGUID = '{6f302107-3477-4468-8a08-eef9db10e20f}';

    MF_SampleProtectionSalt: TGUID = '{5403deee-b9ee-438f-aa83-3804997e569d}';
    MF_REMOTE_PROXY: TGUID = '{2f00c90e-d2cf-4278-8b6a-d077fac3a25f}';
    CLSID_CreateMediaExtensionObject: TGUID = '{ef65a54d-0788-45b8-8b14-bc0f6a6b5137}';
    MF_SAMI_SERVICE: TGUID = '{49a89ae7-b4d9-4ef2-aa5c-f65a3e05ae4e}';
    MF_PD_SAMI_STYLELIST: TGUID = '{e0b73c7f-486d-484e-9872-4de5192a7bf8}';
    MF_SD_SAMI_LANGUAGE: TGUID = '{36fcb98a-6cd0-44cb-acb9-a8f5600dd0bb}';
    MF_TRANSCODE_CONTAINERTYPE: TGUID = '{150ff23f-4abc-478b-ac4f-e1916fba1cca}';
    MFTranscodeContainerType_ASF: TGUID = '{430f6f6e-b6bf-4fc1-a0bd-9ee46eee2afb}';
    MFTranscodeContainerType_MPEG4: TGUID = '{dc6cd05d-b9d0-40ef-bd35-fa622c1ab28a}';
    MFTranscodeContainerType_MP3: TGUID = '{e438b912-83f1-4de6-9e3a-9ffbc6dd24d1}';
    MFTranscodeContainerType_FLAC: TGUID = '{31344aa3-05a9-42b5-901b-8e9d4257f75e}';
    MFTranscodeContainerType_3GP: TGUID = '{34c50167-4472-4f34-9ea0-c49fbacf037d}';
    MFTranscodeContainerType_AC3: TGUID = '{6d8d91c3-8c91-4ed1-8742-8c347d5b44d0}';
    MFTranscodeContainerType_ADTS: TGUID = '{132fd27d-0f02-43de-a301-38fbbbb3834e}';
    MFTranscodeContainerType_MPEG2: TGUID = '{bfc2dbf9-7bb4-4f8f-afde-e112c44ba882}';
    MFTranscodeContainerType_WAVE: TGUID = '{64c3453c-0f26-4741-be63-87bdf8bb935b}';
    MFTranscodeContainerType_AVI: TGUID = '{7edfe8af-402f-4d76-a33c-619fd157d0f1}';
    MFTranscodeContainerType_FMPEG4: TGUID = '{9ba876f1-419f-4b77-a1e0-35959d9d4004}';
    MFTranscodeContainerType_AMR: TGUID = '{025d5ad3-621a-475b-964d-66b1c824f079}';
    MF_TRANSCODE_SKIP_METADATA_TRANSFER: TGUID = '{4e4469ef-b571-4959-8f83-3dcfba33a393}';
    MF_TRANSCODE_TOPOLOGYMODE: TGUID = '{3e3df610-394a-40b2-9dea-3bab650bebf2}';
    MF_TRANSCODE_ADJUST_PROFILE: TGUID = '{9c37c21b-060f-487c-a690-80d7f50d1c72}';
    MF_TRANSCODE_ENCODINGPROFILE: TGUID = '{6947787c-f508-4ea9-b1e9-a1fe3a49fbc9}';
    MF_TRANSCODE_QUALITYVSSPEED: TGUID = '{98332df8-03cd-476b-89fa-3f9e442dec9f}';
    MF_TRANSCODE_DONOT_INSERT_ENCODER: TGUID = '{f45aa7ce-ab24-4012-a11b-dc8220201410}';
    MF_VIDEO_PROCESSOR_ALGORITHM: TGUID = '{4a0a1e1f-272c-4fb6-9eb1-db330cbc97ca}';
    MF_XVP_DISABLE_FRC: TGUID = '{2c0afa19-7a97-4d5a-9ee8-16d4fc518d8c}';
    MF_XVP_CALLER_ALLOCATES_OUTPUT: TGUID = '{04a2cabc-0cab-40b1-a1b9-75bc3658f000}';

    MF_LOCAL_MFT_REGISTRATION_SERVICE: TGUID = '{ddf5cf9c-4506-45aa-abf0-6d5d94dd1b4a}';
    MF_WRAPPED_BUFFER_SERVICE: TGUID = '{ab544072-c269-4ebc-a552-1c3b32bed5ca}';
    MF_WRAPPED_SAMPLE_SERVICE: TGUID = '{31f52bf2-d03e-4048-80d0-9c1046d87c61}';
    MF_WRAPPED_OBJECT: TGUID = '{2b182c4c-d6ac-49f4-8915-f71887db70cd}';
    CLSID_HttpSchemePlugin: TGUID = '{44cb442b-9da9-49df-b3fd-023777b16e50}';
    CLSID_UrlmonSchemePlugin: TGUID = '{9ec4b4f9-3029-45ad-947b-344de2a249e2}';
    CLSID_NetSchemePlugin: TGUID = '{e9f4ebab-d97b-463e-a2b1-c54ee3f9414d}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE: TGUID = '{c60ac5fe-252a-478f-a0ef-bc8fa5f7cad3}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE: TGUID = '{de7046ba-54d6-4487-a2a4-ec7c0d1bd163}';
    MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME: TGUID = '{60d0e559-52f8-4fa2-bbce-acdb34a8ec01}';
    MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE: TGUID = '{56a819ca-0c78-4de4-a0a7-3ddaba0f24d4}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY: TGUID = '{77f0ae69-c3bd-4509-941d-467e4d24899e}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK: TGUID = '{58f0aad8-22bf-4f8a-bb3d-d2c4978c6e2f}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_SYMBOLIC_LINK: TGUID = '{98d24b5e-5930-4614-b5a1-f600f9355a78}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS: TGUID = '{7dd9b730-4f2d-41d5-8f95-0cc9a912ba26}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID: TGUID = '{30da9258-feb9-47a7-a453-763a7a8e1c5f}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE: TGUID = '{bc9d118e-8c67-4a18-85d4-12d300400552}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_PROVIDER_DEVICE_ID: TGUID = '{36689d42-a06c-40ae-84cf-f5a034067cc4}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID: TGUID = '{14dd9a1c-7cff-41be-b1b9-ba1ac6ecb571}';
    MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID: TGUID = '{8ac3587a-4ae7-42d8-99e0-0a6013eef90f}';
    MF_DEVICESTREAM_IMAGE_STREAM: TGUID = '{a7ffb865-e7b2-43b0-9f6f-9af2a0e50fc0}';
    MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM: TGUID = '{03eeec7e-d605-4576-8b29-6580b490d7d3}';
    MF_DEVICESTREAM_STREAM_ID: TGUID = '{11bd5120-d124-446b-88e6-17060257fff9}';
    MF_DEVICESTREAM_STREAM_CATEGORY: TGUID = '{2939e7b8-a62e-4579-b674-d4073dfabbba}';
    MF_DEVICESTREAM_FRAMESERVER_SHARED: TGUID = '{1CB378E9-B279-41D4-AF97-34A243E68320}';
    MF_DEVICESTREAM_TRANSFORM_STREAM_ID: TGUID = '{e63937b7-daaf-4d49-815f-d826f8ad31e7}';
    MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID: TGUID = '{048e6558-60c4-4173-bd5b-6a3ca2896aee}';
    MF_DEVICEMFT_EXTENSION_PLUGIN_CLSID: TGUID = '{0844dbae-34fa-48a0-a783-8e696fb1c9a8}';
    MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT: TGUID = '{37f9375c-e664-4ea4-aae4-cb6d1daca1f4}';
    MF_DEVICESTREAM_TAKEPHOTO_TRIGGER: TGUID = '{1d180e34-538c-4fbb-a75a-859af7d261a6}';
    MF_DEVICESTREAM_MAX_FRAME_BUFFERS: TGUID = '{1684cebe-3175-4985-882c-0efd3e8ac11e}';
    MF_DEVICEMFT_CONNECTED_FILTER_KSCONTROL: TGUID = '{6a2c4fa6-d179-41cd-9523-822371ea40e5}';
    MF_DEVICEMFT_CONNECTED_PIN_KSCONTROL: TGUID = '{e63310f7-b244-4ef8-9a7d-24c74e32ebd0}';
    MF_DEVICE_THERMAL_STATE_CHANGED: TGUID = '{70ccd0af-fc9f-4deb-a875-9fecd16c5bd4}';
    MFSampleExtension_DeviceTimestamp: TGUID = '{8f3e35e7-2dcd-4887-8622-2a58baa652b0}';
    MFSampleExtension_Spatial_CameraViewTransform: TGUID = '{4e251fa4-830f-4770-859a-4b8d99aa809b}';
    MFSampleExtension_Spatial_CameraCoordinateSystem: TGUID = '{9d13c82f-2199-4e67-91cd-d1a4181f2534}';
    MFSampleExtension_Spatial_CameraProjectionTransform: TGUID = '{47f9fcb5-2a02-4f26-a477-792fdf95886a}';

    CLSID_MPEG2ByteStreamPlugin: TGUID = '{40871c59-ab40-471f-8dc3-1f259d862479}';
    MF_MEDIASOURCE_SERVICE: TGUID = '{f09992f7-9fba-4c4a-a37f-8c47b4e1dfe7}';
    MF_ACCESS_CONTROLLED_MEDIASOURCE_SERVICE: TGUID = '{014a5031-2f05-4c6a-9f9c-7d0dc4eda5f4}';
    MF_CONTENT_DECRYPTOR_SERVICE: TGUID = '{68a72927-fc7b-44ee-85f4-7c51bd55a659}';
    MF_CONTENT_PROTECTION_DEVICE_SERVICE: TGUID = '{ff58436f-76a0-41fe-b566-10cc53962edd}';
    MF_SD_AUDIO_ENCODER_DELAY: TGUID = '{8e85422c-73de-403f-9a35-550ad6e8b951}';
    MF_SD_AUDIO_ENCODER_PADDING: TGUID = '{529c7f2c-ac4b-4e3f-bfc3-0902194982cb}';
    CLSID_MSH264DecoderMFT: TGUID = '{62CE7E72-4C71-4d20-B15D-452831A87D9D}';
    CLSID_MSH264EncoderMFT: TGUID = '{6ca50344-051a-4ded-9779-a43305165e35}';
    CLSID_MSDDPlusDecMFT: TGUID = '{177C0AFE-900B-48d4-9E4C-57ADD250B3D4}';
    CLSID_MP3DecMediaObject: TGUID = '{bbeea841-0a63-4f52-a7ab-a9b3a84ed38a}';
    CLSID_MSAACDecMFT: TGUID = '{32d186a7-218f-4c75-8876-dd77273a8999}';
    CLSID_MSH265DecoderMFT: TGUID = '{420A51A3-D605-430C-B4FC-45274FA6C562}';
    CLSID_WMVDecoderMFT: TGUID = '{82d353df-90bd-4382-8bc2-3f6192b76e34}';
    CLSID_WMADecMediaObject: TGUID = '{2eeb4adf-4578-4d10-bca7-bb955f56320a}';
    CLSID_MSMPEGAudDecMFT: TGUID = '{70707B39-B2CA-4015-ABEA-F8447D22D88B}';
    CLSID_MSMPEGDecoderMFT: TGUID = '{2D709E52-123F-49b5-9CBC-9AF5CDE28FB9}';
    CLSID_AudioResamplerMediaObject: TGUID = '{f447b69e-1884-4a7e-8055-346f74d6edb3}';

    CLSID_MSVPxDecoder: TGUID = '{E3AAF548-C9A4-4C6E-234D-5ADA374B0000}';
    CLSID_MSOpusDecoder: TGUID = '{63e17c10-2d43-4c42-8fe3-8d8b63e46a6a}';
    CLSID_VideoProcessorMFT: TGUID = '{88753b26-5b24-49bd-b2e7-0c445c78c982}';

    MFNETSOURCE_CROSS_ORIGIN_SUPPORT: TGUID = '{9842207c-b02c-4271-a2fc-72e49308e5c2}';
    MFNETSOURCE_HTTP_DOWNLOAD_SESSION_PROVIDER: TGUID = '{7d55081e-307d-4d6d-a663-a93be97c4b5c}';
    MF_SD_MEDIASOURCE_STATUS: TGUID = '{1913678b-fc0f-44da-8f43-1ba3b526f4ae}';
    MF_SD_VIDEO_SPHERICAL: TGUID = '{a51da449-3fdc-478c-bcb5-30be76595f55}';
    MF_SD_VIDEO_SPHERICAL_FORMAT: TGUID = '{4a8fc407-6ea1-46c8-b567-6971d4a139c3}';
    MF_SD_VIDEO_SPHERICAL_INITIAL_VIEWDIRECTION: TGUID = '{11d25a49-bb62-467f-9db1-c17165716c49}';
    MF_MEDIASOURCE_EXPOSE_ALL_STREAMS: TGUID = '{e7f250b8-8fd9-4a09-b6c1-6a315c7c720e}';
    MF_ST_MEDIASOURCE_COLLECTION: TGUID = '{616DE972-83AD-4950-8170-630D19CBE307}';
    MF_DEVICESTREAM_FILTER_KSCONTROL: TGUID = '{46783CCA-3DF5-4923-A9EF-36B7223EDDE0}';
    MF_DEVICESTREAM_PIN_KSCONTROL: TGUID = '{EF3EF9A7-87F2-48CA-BE02-674878918E98}';
    MF_DEVICESTREAM_SOURCE_ATTRIBUTES: TGUID = '{2F8CB617-361B-434F-85EA-99A03E1CE4E0}';
    MF_DEVICESTREAM_FRAMESERVER_HIDDEN: TGUID = '{F402567B-4D91-4179-96D1-74C8480C2034}';
    MF_STF_VERSION_INFO: TGUID = '{6770BD39-EF82-44EE-A49B-934BEB24AEF7}';
    MF_STF_VERSION_DATE: TGUID = '{31A165D5-DF67-4095-8E44-8868FC20DBFD}';
    MF_DEVICESTREAM_REQUIRED_CAPABILITIES: TGUID = '{6D8B957E-7CF6-43F4-AF56-9C0E1E4FCBE1}';
    MF_DEVICESTREAM_REQUIRED_SDDL: TGUID = '{331AE85D-C0D3-49BA-83BA-82A12D63CDD6}';
    MF_DEVICEMFT_SENSORPROFILE_COLLECTION: TGUID = '{36EBDC44-B12C-441B-89F4-08B2F41A9CFC}';
    MF_DEVICESTREAM_SENSORSTREAM_ID: TGUID = '{E35B9FE4-0659-4CAD-BB51-33160BE7E413}';
    MFStreamExtension_ExtendedCameraIntrinsics: TGUID = '{aa74b3df-9a2c-48d6-8393-5bd1c1a81e6e}';
    MFSampleExtension_ExtendedCameraIntrinsics: TGUID = '{560bc4a5-4de0-4113-9cdc-832db9740f3d}';


    // if (NTDDI_VERSION >= NTDDI_WIN10_RS3)
    MF_XVP_SAMPLE_LOCK_TIMEOUT: TGUID = '{aa4ddb29-5134-4363-ac72-83ec4bc10426}';

// MF_PMP_SERVICE is the service GUID for
// obtaining IMFPMPHost
//    MF_PMP_SERVICE : TGUID = '{}';


// MF_SCRUBBING_SERVICE : TGUID = '{}';

const
    MFPKEY_SourceOpenMonitor: TPROPERTYKEY = (fmtid: '{074d4637-b5ae-465d-af17-1a538d2859dd}'; pid: $02);
    MFPKEY_ASFMediaSource_ApproxSeek: TPROPERTYKEY = (fmtid: '{b4cd270f-244d-4969-bb92-3f0fb8316f10}'; pid: $01);
    MFPKEY_ASFMediaSource_IterativeSeekIfNoIndex: TPROPERTYKEY = (fmtid: '{170b65dc-4a4e-407a-ac22-577f50e4a37c}'; pid: $01);
    MFPKEY_ASFMediaSource_IterativeSeek_Max_Count: TPROPERTYKEY = (fmtid: '{170b65dc-4a4e-407a-ac22-577f50e4a37c}'; pid: $02);
    MFPKEY_ASFMediaSource_IterativeSeek_Tolerance_In_MilliSecond: TPROPERTYKEY = (fmtid: '{170b65dc-4a4e-407a-ac22-577f50e4a37c}'; pid: $03);
    MFPKEY_Content_DLNA_Profile_ID: TPROPERTYKEY = (fmtid: '{cfa31b45-525d-4998-bb44-3f7d81542fa4}'; pid: $01);
    MFPKEY_MediaSource_DisableReadAhead: TPROPERTYKEY = (fmtid: '{26366c14-c5bf-4c76-887b-9f1754db5f09}'; pid: $01);
    MFPKEY_SBESourceMode: TPROPERTYKEY = (fmtid: '{3fae10bb-f859-4192-b562-1868d3da3a02}'; pid: $01);

    MFPKEY_PMP_Creation_Callback: TPROPERTYKEY = (fmtid: '{28bb4de2-26a2-4870-b720-d26bbeb14942}'; pid: $01);
    MFPKEY_HTTP_ByteStream_Enable_Urlmon: TPROPERTYKEY = (fmtid: '{eda8afdf-c171-417f-8d17-2e0918303292}'; pid: $01);
    MFPKEY_HTTP_ByteStream_Urlmon_Bind_Flags: TPROPERTYKEY = (fmtid: '{eda8afdf-c171-417f-8d17-2e0918303292}'; pid: $02);
    MFPKEY_HTTP_ByteStream_Urlmon_Security_Id: TPROPERTYKEY = (fmtid: '{eda8afdf-c171-417f-8d17-2e0918303292}'; pid: $03);
    MFPKEY_HTTP_ByteStream_Urlmon_Window: TPROPERTYKEY = (fmtid: '{eda8afdf-c171-417f-8d17-2e0918303292}'; pid: $04);
    MFPKEY_HTTP_ByteStream_Urlmon_Callback_QueryService: TPROPERTYKEY = (fmtid: '{eda8afdf-c171-417f-8d17-2e0918303292}'; pid: $05);
    MFPKEY_MediaProtectionSystemId: TPROPERTYKEY = (fmtid: '{636b271d-ddc7-49e9-a6c6-47385962e5bd}'; pid: $01);
    MFPKEY_MediaProtectionSystemContext: TPROPERTYKEY = (fmtid: '{636b271d-ddc7-49e9-a6c6-47385962e5bd}'; pid: $02);
    MFPKEY_MediaProtectionSystemIdMapping: TPROPERTYKEY = (fmtid: '{636b271d-ddc7-49e9-a6c6-47385962e5bd}'; pid: $03);
    MFPKEY_MediaProtectionContainerGuid: TPROPERTYKEY = (fmtid: '{42af3d7c-00cf-4a0f-81f0-adf524a5a5b5}'; pid: $1);
    MFPKEY_MediaProtectionSystemContextsPerTrack: TPROPERTYKEY = (fmtid: '{4454b092-d3da-49b0-8452-6850c7db764d}'; pid: $03);

    MFPKEY_HTTP_ByteStream_Download_Mode: TPROPERTYKEY = (fmtid: '{817f11b7-a982-46ec-a449-ef58aed53ca8}'; pid: $01);
    MFPKEY_HTTP_ByteStream_Caching_Mode: TPROPERTYKEY = (fmtid: '{86a2403e-c78b-44d7-8bc8-ff7258117508}'; pid: $01);
    MFPKEY_HTTP_ByteStream_Cache_Limit: TPROPERTYKEY = (fmtid: '{86a2403e-c78b-44d7-8bc8-ff7258117508}'; pid: $02);

const
    // enum __MIDL___MIDL_itf_mfidl_0000_0001_0001
    MF_RESOLUTION_MEDIASOURCE = $1;
    MF_RESOLUTION_BYTESTREAM = $2;
    MF_RESOLUTION_CONTENT_DOES_NOT_HAVE_TO_MATCH_EXTENSION_OR_MIME_TYPE = $10;
    MF_RESOLUTION_KEEP_BYTE_STREAM_ALIVE_ON_FAIL = $20;
    MF_RESOLUTION_DISABLE_LOCAL_PLUGINS = $40;
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_APPROVED_ONLY = $80;
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY = $100;
    MF_RESOLUTION_PLUGIN_CONTROL_POLICY_WEB_ONLY_EDGEMODE = $200;
    MF_RESOLUTION_ENABLE_STORE_PLUGINS = $400;
    MF_RESOLUTION_READ = $10000;
    MF_RESOLUTION_WRITE = $20000;

    MEDIASINK_FIXED_STREAMS = $00000001;
    MEDIASINK_CANNOT_MATCH_CLOCK = $00000002;
    MEDIASINK_RATELESS = $00000004;
    MEDIASINK_CLOCK_REQUIRED = $00000008;
    MEDIASINK_CAN_PREROLL = $00000010;
    MEDIASINK_REQUIRE_REFERENCE_MEDIATYPE = $00000020;

    MFCLOCK_FREQUENCY_HNS = 10000000;
    MFCLOCK_TOLERANCE_UNKNOWN = 50000;
    MFCLOCK_JITTER_ISR = 1000;
    MFCLOCK_JITTER_DPC = 4000;
    MFCLOCK_JITTER_PASSIVE = 10000;

    PRESENTATION_CURRENT_POSITION = $7FFFFFFFFFFFFFFF;

    MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_CROSSPROCESS = $00000001;
    MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_NOPERSIST = $00000002;
    MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS_DONT_ALLOW_FORMAT_CHANGES = $00000004;

    MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL = $1;   // enum __MIDL___MIDL_itf_mfidl_0000_0028_0001

    MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL = $1; // enum __MIDL___MIDL_itf_mfidl_0000_0028_0002
    MFSEQUENCER_INVALID_ELEMENT_ID = $FFFFFFFF;


    // The values for MFRR_COMPONENT_HASH_INFO.ulReason

    MF_USER_MODE_COMPONENT_LOAD = $00000001;
    MF_KERNEL_MODE_COMPONENT_LOAD = $00000002;
    MF_GRL_LOAD_FAILED = $00000010;
    MF_INVALID_GRL_SIGNATURE = $00000020;
    MF_GRL_ABSENT = $00001000;
    MF_COMPONENT_REVOKED = $00002000;
    MF_COMPONENT_INVALID_EKU = $00004000;
    MF_COMPONENT_CERT_REVOKED = $00008000;
    MF_COMPONENT_INVALID_ROOT = $00010000;
    MF_COMPONENT_HS_CERT_REVOKED = $00020000;
    MF_COMPONENT_LS_CERT_REVOKED = $00040000;
    MF_BOOT_DRIVER_VERIFICATION_FAILED = $00100000;
    MF_TEST_SIGNED_COMPONENT_LOADING = $01000000;
    MF_MINCRYPT_FAILURE = $10000000;

    // Structs that contain information about revoked or unsigned binaries,
    // returned by the IMFContentEnabler::GetEnableData() method of
    // the Revocation content enabler
    MFRR_INFO_VERSION = 0;

    // STR_HASH_LEN: Number of characters required to represent a SHA-1 hash
    // (RTL_MAX_HASH_LEN_V1) as a string of the form "$5a3b53463b672a4f..."
    // Each byte of a SHA-1 hash takes two characters to represent, and
    // we add in two leading characters "$" as well as the NULL terminator

    SHA_HASH_LEN = 20;
    STR_HASH_LEN = (SHA_HASH_LEN * 2 + 3);

const
    MFOUTPUTATTRIBUTE_DIGITAL = DWORD($00000001);
    MFOUTPUTATTRIBUTE_NONSTANDARDIMPLEMENTATION = DWORD($00000002);
    MFOUTPUTATTRIBUTE_VIDEO = DWORD($00000004);
    MFOUTPUTATTRIBUTE_COMPRESSED = DWORD($00000008);
    MFOUTPUTATTRIBUTE_SOFTWARE = DWORD($00000010);
    MFOUTPUTATTRIBUTE_BUS = DWORD($00000020);
    MFOUTPUTATTRIBUTE_BUSIMPLEMENTATION = DWORD($0000FF00);

    MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START = $04000000;
    MFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA_FUNCTIONID = MFCONTENTPROTECTIONDEVICE_FUNCTIONID_START;

    MF_UNKNOWN_DURATION = 0;

type
{$IFNDEF FPC}
    CLSID = TGUID;
    PCLSID = ^CLSID;
{$ENDIF}
{$Z1}
{$A1}

    TASF_FLAT_PICTURE = packed record
        // Direct mapped fields
        bPictureType: byte;
        dwDataLen: DWORD;
    end;

    PASF_FLAT_PICTURE = ^TASF_FLAT_PICTURE;
    TASFFlatPicture = TASF_FLAT_PICTURE;

    TASF_FLAT_SYNCHRONISED_LYRICS = packed record
        // Direct mapped fields
        bTimeStampFormat: byte;
        bContentType: byte;
        dwLyricsLen: DWORD;
    end;

    PASF_FLAT_SYNCHRONISED_LYRICS = ^TASF_FLAT_SYNCHRONISED_LYRICS;
    TASFFlatSynchronisedLyrics = TASF_FLAT_SYNCHRONISED_LYRICS;

{$Z4}
{$A4}

    TMFSESSION_SETTOPOLOGY_FLAGS = (MFSESSION_SETTOPOLOGY_IMMEDIATE = $1, MFSESSION_SETTOPOLOGY_NORESOLUTION = $2,
        MFSESSION_SETTOPOLOGY_CLEAR_CURRENT = $4);

    TMFSESSION_GETFULLTOPOLOGY_FLAGS = (MFSESSION_GETFULLTOPOLOGY_CURRENT = $1);

    TMFPMPSESSION_CREATION_FLAGS = (MFPMPSESSION_UNPROTECTED_PROCESS = $1, MFPMPSESSION_IN_PROCESS = $2);

    TTOPOID = UINT64;

    IMFTopology = interface;
    IMFClock = interface;
    IMFPresentationDescriptor = interface;
    IMFStreamDescriptor = interface;
    IMFStreamSink = interface;
    IMFPresentationClock = interface;
    IMFMediaTypeHandler = interface;
    IMFTopologyNode = interface;
    IMFPresentationTimeSource = interface;
    IMFClockStateSink = interface;
    IMFOutputPolicy = interface;
    PIMFOutputPolicy = ^IMFOutputPolicy;
    IMFOutputTrustAuthority = interface;

    IMFMediaSession = interface(IMFMediaEventGenerator)
        ['{90377834-21D0-4dee-8214-BA2E3E6C1127}']
        function SetTopology(dwSetTopologyFlags: DWORD; pTopology: IMFTopology): HResult; stdcall;
        function ClearTopologies(): HResult; stdcall;
        function Start(const pguidTimeFormat: TGUID; const pvarStartPosition: PROPVARIANT): HResult; stdcall;
        function Pause(): HResult; stdcall;
        function Stop(): HResult; stdcall;
        function Close(): HResult; stdcall;
        function Shutdown(): HResult; stdcall;
        function GetClock(out ppClock: IMFClock): HResult; stdcall;
        function GetSessionCapabilities(out pdwCaps: DWORD): HResult; stdcall;
        function GetFullTopology(dwGetFullTopologyFlags: DWORD; TOPOID: TTOPOID; out ppFullTopology: IMFTopology): HResult; stdcall;
    end;

    TMF_OBJECT_TYPE = (MF_OBJECT_MEDIASOURCE = 0, MF_OBJECT_BYTESTREAM = (MF_OBJECT_MEDIASOURCE + 1), MF_OBJECT_INVALID =
        (MF_OBJECT_BYTESTREAM + 1));

    TMF_CONNECT_METHOD = (MF_CONNECT_DIRECT = 0, MF_CONNECT_ALLOW_CONVERTER = $1, MF_CONNECT_ALLOW_DECODER = $3,
        MF_CONNECT_RESOLVE_INDEPENDENT_OUTPUTTYPES = $4, MF_CONNECT_AS_OPTIONAL = $10000, MF_CONNECT_AS_OPTIONAL_BRANCH = $20000);

    TMF_TOPOLOGY_RESOLUTION_STATUS_FLAGS = (MF_TOPOLOGY_RESOLUTION_SUCCEEDED = 0, MF_OPTIONAL_NODE_REJECTED_MEDIA_TYPE = $1,
        MF_OPTIONAL_NODE_REJECTED_PROTECTED_PROCESS = $2);

    IMFSourceResolver = interface(IUnknown)
        ['{FBE5A32D-A497-4b61-BB85-97B1A848A6E3}']
        function CreateObjectFromURL(pwszURL: LPCWSTR; dwFlags: DWORD; pProps: IPropertyStore; out pObjectType: TMF_OBJECT_TYPE;
            out ppObject: IUnknown): HResult; stdcall;
        function CreateObjectFromByteStream(pByteStream: IMFByteStream; pwszURL: LPCWSTR; dwFlags: DWORD;
            pProps: IPropertyStore; out pObjectType: TMF_OBJECT_TYPE; out ppObject: IUnknown): HResult; stdcall;
        function BeginCreateObjectFromURL(pwszURL: LPCWSTR; dwFlags: DWORD; pProps: IPropertyStore;
            out ppIUnknownCancelCookie: IUnknown; pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndCreateObjectFromURL(pResult: IMFAsyncResult; out pObjectType: TMF_OBJECT_TYPE; out ppObject: IUnknown): HResult; stdcall;
        function BeginCreateObjectFromByteStream(pByteStream: IMFByteStream; pwszURL: LPCWSTR; dwFlags: DWORD;
            pProps: IPropertyStore; out ppIUnknownCancelCookie: IUnknown; pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndCreateObjectFromByteStream(pResult: IMFAsyncResult; out pObjectType: TMF_OBJECT_TYPE; out ppObject: IUnknown): HResult; stdcall;
        function CancelObjectCreation(pIUnknownCancelCookie: IUnknown): HResult; stdcall;
    end;

    TMFMEDIASOURCE_CHARACTERISTICS = (MFMEDIASOURCE_IS_LIVE = $1, MFMEDIASOURCE_CAN_SEEK = $2, MFMEDIASOURCE_CAN_PAUSE =
        $4, MFMEDIASOURCE_HAS_SLOW_SEEK = $8,
        MFMEDIASOURCE_HAS_MULTIPLE_PRESENTATIONS = $10, MFMEDIASOURCE_CAN_SKIPFORWARD = $20, MFMEDIASOURCE_CAN_SKIPBACKWARD = $40,
        MFMEDIASOURCE_DOES_NOT_USE_NETWORK = $80);

    IMFMediaSource = interface(IMFMediaEventGenerator)
        ['{279a808d-aec7-40c8-9c6b-a6b492c78a66}']
        function GetCharacteristics(out pdwCharacteristics: DWORD): HResult; stdcall;
        function CreatePresentationDescriptor(out ppPresentationDescriptor: IMFPresentationDescriptor): HResult; stdcall;
        function Start(pPresentationDescriptor: IMFPresentationDescriptor; const pguidTimeFormat: TGUID;
            const pvarStartPosition: TPROPVARIANT): HResult;
            stdcall;
        function Stop(): HResult; stdcall;
        function Pause(): HResult; stdcall;
        function Shutdown(): HResult; stdcall;
    end;

    IMFMediaSourceEx = interface(IMFMediaSource)
        ['{3C9B2EB9-86D5-4514-A394-F56664F9F0D8}']
        function GetSourceAttributes(out ppAttributes): IMFAttributes; stdcall;
        function GetStreamAttributes(dwStreamIdentifier: DWORD; out ppAttributes: IMFAttributes): HResult; stdcall;
        function SetD3DManager(pManager: IUnknown): HResult; stdcall;
    end;

    IMFClockConsumer = interface(IUnknown)
        ['{6ef2a662-47c0-4666-b13d-cbb717f2fa2c}']
        function SetPresentationClock(pPresentationClock: IMFPresentationClock): HResult; stdcall;

        function GetPresentationClock(out ppPresentationClock: IMFPresentationClock): HResult; stdcall;

    end;


    IMFMediaStream = interface(IMFMediaEventGenerator)
        ['{D182108F-4EC6-443f-AA42-A71106EC825F}']
        function GetMediaSource(out ppMediaSource: IMFMediaSource): HResult; stdcall;
        function GetStreamDescriptor(out ppStreamDescriptor: IMFStreamDescriptor): HResult; stdcall;
        function RequestSample(pToken: IUnknown): HResult; stdcall;
    end;

    TMF_TRANSFER_VIDEO_FRAME_FLAGS = (MF_TRANSFER_VIDEO_FRAME_DEFAULT = 0, MF_TRANSFER_VIDEO_FRAME_STRETCH = 1,
        MF_TRANSFER_VIDEO_FRAME_IGNORE_PAR = 2);

    IMFMediaSink = interface(IUnknown)
        ['{6ef2a660-47c0-4666-b13d-cbb717f2fa2c}']
        function GetCharacteristics(out pdwCharacteristics: DWORD): HResult; stdcall;
        function AddStreamSink(dwStreamSinkIdentifier: DWORD; pMediaType: IMFMediaType; out ppStreamSink: IMFStreamSink): HResult; stdcall;
        function RemoveStreamSink(dwStreamSinkIdentifier: DWORD): HResult; stdcall;
        function GetStreamSinkCount(out pcStreamSinkCount: DWORD): HResult; stdcall;
        function GetStreamSinkByIndex(dwIndex: DWORD; out ppStreamSink: IMFStreamSink): HResult; stdcall;
        function GetStreamSinkById(dwStreamSinkIdentifier: DWORD; out ppStreamSink: IMFStreamSink): HResult; stdcall;
        function SetPresentationClock(pPresentationClock: IMFPresentationClock): HResult; stdcall;
        function GetPresentationClock(out ppPresentationClock: IMFPresentationClock): HResult; stdcall;
        function Shutdown(): HResult; stdcall;
    end;

    TMFSTREAMSINK_MARKER_TYPE = (MFSTREAMSINK_MARKER_DEFAULT = 0, MFSTREAMSINK_MARKER_ENDOFSEGMENT = (MFSTREAMSINK_MARKER_DEFAULT + 1),
        MFSTREAMSINK_MARKER_TICK = (MFSTREAMSINK_MARKER_ENDOFSEGMENT + 1), MFSTREAMSINK_MARKER_EVENT = (MFSTREAMSINK_MARKER_TICK + 1));

    IMFStreamSink = interface(IMFMediaEventGenerator)
        ['{0A97B3CF-8E7C-4a3d-8F8C-0C843DC247FB}']
        function GetMediaSink(out ppMediaSink: IMFMediaSink): HResult; stdcall;
        function GetIdentifier(out pdwIdentifier: DWORD): HResult; stdcall;
        function GetMediaTypeHandler(out ppHandler: IMFMediaTypeHandler): HResult; stdcall;
        function ProcessSample(pSample: IMFSample): HResult; stdcall;
        function PlaceMarker(eMarkerType: TMFSTREAMSINK_MARKER_TYPE; const pvarMarkerValue: TPROPVARIANT;
            const pvarContextValue: TPROPVARIANT): HResult; stdcall;
        function Flush(): HResult; stdcall;
    end;

    IMFVideoSampleAllocator = interface(IUnknown)
        ['{86cbc910-e533-4751-8e3b-f19b5b806a03}']
        function SetDirectXManager(pManager: IUnknown): HResult; stdcall;
        function UninitializeSampleAllocator(): HResult; stdcall;
        function InitializeSampleAllocator(cRequestedFrames: DWORD; pMediaType: IMFMediaType): HResult; stdcall;
        function AllocateSample(out ppSample: IMFSample): HResult; stdcall;
    end;

    IMFVideoSampleAllocatorNotify = interface(IUnknown)
        ['{A792CDBE-C374-4e89-8335-278E7B9956A4}']
        function NotifyRelease(): HResult; stdcall;
    end;

    IMFVideoSampleAllocatorNotifyEx = interface(IMFVideoSampleAllocatorNotify)
        ['{3978AA1A-6D5B-4B7F-A340-90899189AE34}']
        function NotifyPrune(__MIDL__IMFVideoSampleAllocatorNotifyEx0000: IMFSample): HResult; stdcall;
    end;

    IMFVideoSampleAllocatorCallback = interface(IUnknown)
        ['{992388B4-3372-4f67-8B6F-C84C071F4751}']
        function SetCallback(pNotify: IMFVideoSampleAllocatorNotify): HResult; stdcall;
        function GetFreeSampleCount(out plSamples: longint): HResult; stdcall;
    end;

    IMFVideoSampleAllocatorEx = interface(IMFVideoSampleAllocator)
        ['{545b3a48-3283-4f62-866f-a62d8f598f9f}']
        function InitializeSampleAllocatorEx(cInitialSamples: DWORD; cMaximumSamples: DWORD; pAttributes: IMFAttributes;
            pMediaType: IMFMediaType): HResult;
            stdcall;
    end;

    IMFDXGIDeviceManagerSource = interface(IUnknown)
        ['{20bc074b-7a8d-4609-8c3b-64a0a3b5d7ce}']
        function GetManager(out ppManager: IMFDXGIDeviceManager): HResult; stdcall;
    end;

    TMF_VIDEO_PROCESSOR_ROTATION = (ROTATION_NONE = 0, ROTATION_NORMAL = 1);

    TMF_VIDEO_PROCESSOR_MIRROR = (MIRROR_NONE = 0, MIRROR_HORIZONTAL = 1, MIRROR_VERTICAL = 2);

    IMFVideoProcessorControl = interface(IUnknown)
        ['{A3F675D5-6119-4f7f-A100-1D8B280F0EFB}']
        function SetBorderColor(const pBorderColor: TMFARGB): HResult; stdcall;
        function SetSourceRectangle(const pSrcRect: TRECT): HResult; stdcall;
        function SetDestinationRectangle(const pDstRect: TRECT): HResult; stdcall;
        function SetMirror(eMirror: TMF_VIDEO_PROCESSOR_MIRROR): HResult; stdcall;
        function SetRotation(eRotation: TMF_VIDEO_PROCESSOR_ROTATION): HResult; stdcall;
        function SetConstrictionSize(const pConstrictionSize: TSIZE): HResult; stdcall;
    end;

    IMFVideoProcessorControl2 = interface(IMFVideoProcessorControl)
        ['{BDE633D3-E1DC-4a7f-A693-BBAE399C4A20}']
        function SetRotationOverride(uiRotation: UINT): HResult; stdcall;
        function EnableHardwareEffects(fEnabled: boolean): HResult; stdcall;
        function GetSupportedHardwareEffects(out puiSupport: UINT): HResult; stdcall;
    end;

    TMFVideoSphericalFormat = (
        MFVideoSphericalFormat_Unsupported = 0,
        MFVideoSphericalFormat_Equirectangular = 1
        );


    TMFVideoSphericalProjectionMode = (
        MFVideoSphericalProjectionMode_Spherical = 0,
        MFVideoSphericalProjectionMode_Flat = (MFVideoSphericalProjectionMode_Spherical + 1)
        );

    IMFVideoProcessorControl3 = interface(IMFVideoProcessorControl2)
        ['{2424B3F2-EB23-40f1-91AA-74BDDEEA0883}']
        function GetNaturalOutputType(out ppType: IMFMediaType): HResult; stdcall;

        function EnableSphericalVideoProcessing(fEnable: boolean; eFormat: TMFVideoSphericalFormat;
            eProjectionMode: TMFVideoSphericalProjectionMode): HResult; stdcall;

        function SetSphericalVideoProperties(X: single; Y: single; Z: single; W: single; fieldOfView: single): HResult; stdcall;

        function SetOutputDevice(pOutputDevice: IUnknown): HResult; stdcall;

    end;

    IMFTopology = interface(IMFAttributes)
        ['{83CF873A-F6DA-4bc8-823F-BACFD55DC433}']
        function GetTopologyID(out pid: TTOPOID): HResult; stdcall;
        function AddNode(pNode: IMFTopologyNode): HResult; stdcall;
        function RemoveNode(pNode: IMFTopologyNode): HResult; stdcall;
        function GetNodeCount(out pwNodes: word): HResult; stdcall;
        function GetNode(wIndex: word; out ppNode: IMFTopologyNode): HResult; stdcall;
        function Clear(): HResult; stdcall;
        function CloneFrom(pTopology: IMFTopology): HResult; stdcall;
        function GetNodeByID(qwTopoNodeID: TTOPOID; out ppNode: IMFTopologyNode): HResult; stdcall;
        function GetSourceNodeCollection(out ppCollection: IMFCollection): HResult; stdcall;
        function GetOutputNodeCollection(out ppCollection: IMFCollection): HResult; stdcall;
    end;

    TMFTOPOLOGY_DXVA_MODE = (MFTOPOLOGY_DXVA_DEFAULT = 0, MFTOPOLOGY_DXVA_NONE = 1, MFTOPOLOGY_DXVA_FULL = 2);

    TMFTOPOLOGY_HARDWARE_MODE = (MFTOPOLOGY_HWMODE_SOFTWARE_ONLY = 0, MFTOPOLOGY_HWMODE_USE_HARDWARE = 1, MFTOPOLOGY_HWMODE_USE_ONLY_HARDWARE = 2);

    TMF_TOPOLOGY_TYPE = (MF_TOPOLOGY_OUTPUT_NODE = 0, MF_TOPOLOGY_SOURCESTREAM_NODE = (MF_TOPOLOGY_OUTPUT_NODE + 1),
        MF_TOPOLOGY_TRANSFORM_NODE = (MF_TOPOLOGY_SOURCESTREAM_NODE + 1), MF_TOPOLOGY_TEE_NODE = (MF_TOPOLOGY_TRANSFORM_NODE + 1),
        MF_TOPOLOGY_MAX = $FFFFFFFF);

    IMFTopologyNode = interface(IMFAttributes)
        ['{83CF873A-F6DA-4bc8-823F-BACFD55DC430}']
        function SetObject(pObject: IUnknown): HResult; stdcall;
        function GetObject(out ppObject: IUnknown): HResult; stdcall;
        function GetNodeType(out pType: TMF_TOPOLOGY_TYPE): HResult; stdcall;
        function GetTopoNodeID(out pid: TTOPOID): HResult; stdcall;
        function SetTopoNodeID(ullTopoID: TTOPOID): HResult; stdcall;
        function GetInputCount(out pcInputs: DWORD): HResult; stdcall;
        function GetOutputCount(out pcOutputs: DWORD): HResult; stdcall;
        function ConnectOutput(dwOutputIndex: DWORD; pDownstreamNode: IMFTopologyNode; dwInputIndexOnDownstreamNode: DWORD): HResult; stdcall;
        function DisconnectOutput(dwOutputIndex: DWORD): HResult; stdcall;
        function GetInput(dwInputIndex: DWORD; out ppUpstreamNode: IMFTopologyNode; out pdwOutputIndexOnUpstreamNode: DWORD): HResult; stdcall;
        function GetOutput(dwOutputIndex: DWORD; out ppDownstreamNode: IMFTopologyNode; out pdwInputIndexOnDownstreamNode: DWORD): HResult; stdcall;
        function SetOutputPrefType(dwOutputIndex: DWORD; pType: IMFMediaType): HResult; stdcall;
        function GetOutputPrefType(dwOutputIndex: DWORD; out ppType: IMFMediaType): HResult; stdcall;
        function SetInputPrefType(dwInputIndex: DWORD; pType: IMFMediaType): HResult; stdcall;
        function GetInputPrefType(dwInputIndex: DWORD; out ppType: IMFMediaType): HResult; stdcall;
        function CloneFrom(pNode: IMFTopologyNode): HResult; stdcall;
    end;

    TMF_TOPONODE_FLUSH_MODE = (MF_TOPONODE_FLUSH_ALWAYS = 0, MF_TOPONODE_FLUSH_SEEK = (MF_TOPONODE_FLUSH_ALWAYS + 1),
        MF_TOPONODE_FLUSH_NEVER = (MF_TOPONODE_FLUSH_SEEK + 1));

    TMF_TOPONODE_DRAIN_MODE = (MF_TOPONODE_DRAIN_DEFAULT = 0, MF_TOPONODE_DRAIN_ALWAYS = (MF_TOPONODE_DRAIN_DEFAULT + 1),
        MF_TOPONODE_DRAIN_NEVER = (MF_TOPONODE_DRAIN_ALWAYS + 1));

    IMFGetService = interface(IUnknown)
        ['{fa993888-4383-415a-a930-dd472a8cf6f7}']
        function GetService(const guidService: TGUID; const riid: TGUID; out ppvObject: pointer): HResult; stdcall;
    end;

    TMFTIME = LONGLONG;

    TMFCLOCK_CHARACTERISTICS_FLAGS = (MFCLOCK_CHARACTERISTICS_FLAG_FREQUENCY_10MHZ = $2, MFCLOCK_CHARACTERISTICS_FLAG_ALWAYS_RUNNING = $4,
        MFCLOCK_CHARACTERISTICS_FLAG_IS_SYSTEM_CLOCK = $8);

    TMFCLOCK_STATE = (MFCLOCK_STATE_INVALID = 0, MFCLOCK_STATE_RUNNING = (MFCLOCK_STATE_INVALID + 1), MFCLOCK_STATE_STOPPED =
        (MFCLOCK_STATE_RUNNING + 1),
        MFCLOCK_STATE_PAUSED = (MFCLOCK_STATE_STOPPED + 1));

    TMFCLOCK_RELATIONAL_FLAGS = (MFCLOCK_RELATIONAL_FLAG_JITTER_NEVER_AHEAD = $1);

    TMFCLOCK_PROPERTIES = record
        qwCorrelationRate: UINT64;
        guidClockId: TGUID;
        dwClockFlags: DWORD;
        qwClockFrequency: UINT64;
        dwClockTolerance: DWORD;
        dwClockJitter: DWORD;
    end;

    IMFClock = interface(IUnknown)
        ['{2eb1e945-18b8-4139-9b1a-d5d584818530}']
        function GetClockCharacteristics(out pdwCharacteristics: DWORD): HResult; stdcall;
        function GetCorrelatedTime(dwReserved: DWORD; out pllClockTime: LONGLONG; out phnsSystemTime: TMFTIME): HResult; stdcall;
        function GetContinuityKey(out pdwContinuityKey: DWORD): HResult; stdcall;
        function GetState(dwReserved: DWORD; out peClockState: TMFCLOCK_STATE): HResult; stdcall;
        function GetProperties(out pClockProperties: TMFCLOCK_PROPERTIES): HResult; stdcall;
    end;

    IMFPresentationClock = interface(IMFClock)
        ['{868CE85C-8EA9-4f55-AB82-B009A910A805}']
        function SetTimeSource(pTimeSource: IMFPresentationTimeSource): HResult; stdcall;
        function GetTimeSource(out ppTimeSource: IMFPresentationTimeSource): HResult; stdcall;
        function GetTime(out phnsClockTime: TMFTIME): HResult; stdcall;
        function AddClockStateSink(pStateSink: IMFClockStateSink): HResult; stdcall;
        function RemoveClockStateSink(pStateSink: IMFClockStateSink): HResult; stdcall;
        function Start(llClockStartOffset: LONGLONG): HResult; stdcall;
        function Stop(): HResult; stdcall;
        function Pause(): HResult; stdcall;
    end;

    IMFPresentationTimeSource = interface(IMFClock)
        ['{7FF12CCE-F76F-41c2-863B-1666C8E5E139}']
        function GetUnderlyingClock(out ppClock: IMFClock): HResult; stdcall;
    end;

    IMFClockStateSink = interface(IUnknown)
        ['{F6696E82-74F7-4f3d-A178-8A5E09C3659F}']
        function OnClockStart(hnsSystemTime: TMFTIME; llClockStartOffset: LONGLONG): HResult; stdcall;
        function OnClockStop(hnsSystemTime: TMFTIME): HResult; stdcall;
        function OnClockPause(hnsSystemTime: TMFTIME): HResult; stdcall;
        function OnClockRestart(hnsSystemTime: TMFTIME): HResult; stdcall;
        function OnClockSetRate(hnsSystemTime: TMFTIME; flRate: single): HResult; stdcall;
    end;

    IMFPresentationDescriptor = interface(IMFAttributes)
        ['{03cb2711-24d7-4db6-a17f-f3a7a479a536}']
        function GetStreamDescriptorCount(out pdwDescriptorCount: DWORD): HResult; stdcall;
        function GetStreamDescriptorByIndex(dwIndex: DWORD; out pfSelected: boolean; out ppDescriptor: IMFStreamDescriptor): HResult; stdcall;
        function SelectStream(dwDescriptorIndex: DWORD): HResult; stdcall;
        function DeselectStream(dwDescriptorIndex: DWORD): HResult; stdcall;
        function Clone(out ppPresentationDescriptor: IMFPresentationDescriptor): HResult; stdcall;
    end;

    IMFStreamDescriptor = interface(IMFAttributes)
        ['{56c03d9c-9dbb-45f5-ab4b-d80f47c05938}']
        function GetStreamIdentifier(out pdwStreamIdentifier: DWORD): HResult; stdcall;
        function GetMediaTypeHandler(out ppMediaTypeHandler: IMFMediaTypeHandler): HResult; stdcall;
    end;

    PIMFStreamDescriptor = ^IMFStreamDescriptor;

    IMFMediaTypeHandler = interface(IUnknown)
        ['{e93dcf6c-4b07-4e1e-8123-aa16ed6eadf5}']
        function IsMediaTypeSupported(pMediaType: IMFMediaType; out ppMediaType: IMFMediaType): HResult; stdcall;
        function GetMediaTypeCount(out pdwTypeCount: DWORD): HResult; stdcall;
        function GetMediaTypeByIndex(dwIndex: DWORD; out ppType: IMFMediaType): HResult; stdcall;
        function SetCurrentMediaType(pMediaType: IMFMediaType): HResult; stdcall;
        function GetCurrentMediaType(out ppMediaType: IMFMediaType): HResult; stdcall;
        function GetMajorType(out pguidMajorType: TGUID): HResult; stdcall;
    end;

    TMFTIMER_FLAGS = (MFTIMER_RELATIVE = $1);

    IMFTimer = interface(IUnknown)
        ['{e56e4cbd-8f70-49d8-a0f8-edb3d6ab9bf2}']
        function SetTimer(dwFlags: DWORD; llClockTime: LONGLONG; pCallback: IMFAsyncCallback; punkState: IUnknown;
            out ppunkKey: IUnknown): HResult; stdcall;
        function CancelTimer(punkKey: IUnknown): HResult; stdcall;
    end;

    TMFSHUTDOWN_STATUS = (MFSHUTDOWN_INITIATED = 0, MFSHUTDOWN_COMPLETED = (MFSHUTDOWN_INITIATED + 1));

    IMFShutdown = interface(IUnknown)
        ['{97ec2ea4-0e42-4937-97ac-9d6d328824e1}']
        function Shutdown(): HResult; stdcall;
        function GetShutdownStatus(out pStatus: TMFSHUTDOWN_STATUS): HResult; stdcall;
    end;

    IMFTopoLoader = interface(IUnknown)
        ['{DE9A6157-F660-4643-B56A-DF9F7998C7CD}']
        function Load(pInputTopo: IMFTopology; out ppOutputTopo: IMFTopology; pCurrentTopo: IMFTopology): HResult; stdcall;
    end;

    IMFContentProtectionManager = interface(IUnknown)
        ['{ACF92459-6A61-42bd-B57C-B43E51203CB0}']
        function BeginEnableContent(pEnablerActivate: IMFActivate; pTopo: IMFTopology; pCallback: IMFAsyncCallback;
            punkState: IUnknown): HResult; stdcall;
        function EndEnableContent(pResult: IMFAsyncResult): HResult; stdcall;
    end;

    TMF_URL_TRUST_STATUS = (MF_LICENSE_URL_UNTRUSTED = 0, MF_LICENSE_URL_TRUSTED = (MF_LICENSE_URL_UNTRUSTED + 1),
        MF_LICENSE_URL_TAMPERED = (MF_LICENSE_URL_TRUSTED + 1));

    IMFContentEnabler = interface(IUnknown)
        ['{D3C4EF59-49CE-4381-9071-D5BCD044C770}']
        function GetEnableType(out pType: TGUID): HResult; stdcall;
        function GetEnableURL(out ppwszURL: PWideChar; out pcchURL: DWORD; var pTrustStatus: TMF_URL_TRUST_STATUS): HResult; stdcall;
        function GetEnableData(out ppbData: PBYTE; out pcbData: DWORD): HResult; stdcall;
        function IsAutomaticSupported(out pfAutomatic: boolean): HResult; stdcall;
        function AutomaticEnable(): HResult; stdcall;
        function MonitorEnable(): HResult; stdcall;
        function Cancel(): HResult; stdcall;
    end;


    // Structs that contain information about revoked or unsigned binaries,
    // returned by the IMFContentEnabler::GetEnableData() method of
    // the Revocation content enabler

    TMFRR_COMPONENT_HASH_INFO = record
        // Reason for failure (revoked or unsigned or badly signed).
        ulReason: DWORD;
        // Header hash of the component
        rgHeaderHash: array [0 .. STR_HASH_LEN - 1] of WCHAR;
        // Hash of public key if one of the certificates
        // in the signing certificate chain is revoked
        rgPublicKeyHash: array [0 .. STR_HASH_LEN - 1] of WCHAR;
        // Component name (full path name)
        wszName: array [0 .. MAX_PATH - 1] of WCHAR;
    end;

    PMFRR_COMPONENT_HASH_INFO = ^TMFRR_COMPONENT_HASH_INFO;

    TMFRR_COMPONENTS = record
        // Version number
        dwRRInfoVersion: DWORD;
        // Number of components in list
        dwRRComponents: DWORD;
        // points to the end of this structure that has
        // allocated memory for the array of component info structures
        pRRComponents: PMFRR_COMPONENT_HASH_INFO;
    end;

    PMFRR_COMPONENTS = ^TMFRR_COMPONENTS;



    IMFMetadata = interface(IUnknown)
        ['{F88CFB8C-EF16-4991-B450-CB8C69E51704}']
        function SetLanguage(pwszRFC1766: LPCWSTR): HResult; stdcall;
        function GetLanguage(out ppwszRFC1766: LPWSTR): HResult; stdcall;
        function GetAllLanguages(out ppvLanguages: TPROPVARIANT): HResult; stdcall;
        function SetProperty(pwszName: LPCWSTR; const ppvValue: TPROPVARIANT): HResult; stdcall;
        function GetProperty(pwszName: LPCWSTR; out ppvValue: TPROPVARIANT): HResult; stdcall;
        function DeleteProperty(pwszName: LPCWSTR): HResult; stdcall;
        function GetAllPropertyNames(out ppvNames: TPROPVARIANT): HResult; stdcall;
    end;

    IMFMetadataProvider = interface(IUnknown)
        ['{56181D2D-E221-4adb-B1C8-3CEE6A53F76F}']
        function GetMFMetadata(pPresentationDescriptor: IMFPresentationDescriptor; dwStreamIdentifier: DWORD;
            dwFlags: DWORD; out ppMFMetadata: IMFMetadata): HResult; stdcall;
    end;

    TMFRATE_DIRECTION = (MFRATE_FORWARD = 0, MFRATE_REVERSE = (MFRATE_FORWARD + 1));

    IMFRateSupport = interface(IUnknown)
        ['{0a9ccdbc-d797-4563-9667-94ec5d79292d}']
        function GetSlowestRate(eDirection: TMFRATE_DIRECTION; fThin: boolean; out pflRate: single): HResult; stdcall;
        function GetFastestRate(eDirection: TMFRATE_DIRECTION; fThin: boolean; out pflRate: single): HResult; stdcall;
        function IsRateSupported(fThin: boolean; flRate: single; var pflNearestSupportedRate: single): HResult; stdcall;
    end;

    IMFRateControl = interface(IUnknown)
        ['{88ddcd21-03c3-4275-91ed-55ee3929328f}']
        function SetRate(fThin: boolean; flRate: single): HResult; stdcall;
        function GetRate(var pfThin: boolean; var pflRate: single): HResult; stdcall;
    end;

    IMFTimecodeTranslate = interface(IUnknown)
        ['{ab9d8661-f7e8-4ef4-9861-89f334f94e74}']
        function BeginConvertTimecodeToHNS(const pPropVarTimecode: TPROPVARIANT; pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndConvertTimecodeToHNS(pResult: IMFAsyncResult; out phnsTime: TMFTIME): HResult; stdcall;
        function BeginConvertHNSToTimecode(hnsTime: TMFTIME; pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndConvertHNSToTimecode(pResult: IMFAsyncResult; out pPropVarTimecode: TPROPVARIANT): HResult; stdcall;
    end;

    IMFSeekInfo = interface(IUnknown)
        ['{26AFEA53-D9ED-42B5-AB80-E64F9EE34779}']
        function GetNearestKeyFrames(const pguidTimeFormat: TGUID; const pvarStartPosition: TPROPVARIANT;
            out pvarPreviousKeyFrame: TPROPVARIANT; out pvarNextKeyFrame: TPROPVARIANT): HResult; stdcall;
    end;

    IMFSimpleAudioVolume = interface(IUnknown)
        ['{089EDF13-CF71-4338-8D13-9E569DBDC319}']
        function SetMasterVolume(fLevel: single): HResult; stdcall;
        function GetMasterVolume(out pfLevel: single): HResult; stdcall;
        function SetMute(bMute: boolean): HResult; stdcall;
        function GetMute(out pbMute: boolean): HResult; stdcall;
    end;

    IMFAudioStreamVolume = interface(IUnknown)
        ['{76B1BBDB-4EC8-4f36-B106-70A9316DF593}']
        function GetChannelCount(out pdwCount: UINT32): HResult; stdcall;
        function SetChannelVolume(dwIndex: UINT32; const fLevel: single): HResult; stdcall;
        function GetChannelVolume(dwIndex: UINT32; out pfLevel: single): HResult; stdcall;
        function SetAllVolumes(dwCount: UINT32; const pfVolumes: PSingle): HResult; stdcall;
        function GetAllVolumes(dwCount: UINT32; out pfVolumes: PSingle): HResult; stdcall;
    end;

    IMFAudioPolicy = interface(IUnknown)
        ['{a0638c2b-6465-4395-9ae7-a321a9fd2856}']
        function SetGroupingParam(rguidClass: TREFGUID): HResult; stdcall;
        function GetGroupingParam(out pguidClass: TGUID): HResult; stdcall;
        function SetDisplayName(pszName: LPCWSTR): HResult; stdcall;
        function GetDisplayName(out pszName: LPWSTR): HResult; stdcall;
        function SetIconPath(pszPath: LPCWSTR): HResult; stdcall;
        function GetIconPath(out pszPath: LPWSTR): HResult; stdcall;
    end;

    IMFSampleGrabberSinkCallback = interface(IMFClockStateSink)
        ['{8C7B80BF-EE42-4b59-B1DF-55668E1BDCA8}']
        function OnSetPresentationClock(pPresentationClock: IMFPresentationClock): HResult; stdcall;
        function OnProcessSample(const guidMajorMediaType: TGUID; dwSampleFlags: DWORD; llSampleTime: LONGLONG;
            llSampleDuration: LONGLONG; const pSampleBuffer: PBYTE; dwSampleSize: DWORD): HResult; stdcall;
        function OnShutdown(): HResult; stdcall;
    end;

    IMFSampleGrabberSinkCallback2 = interface(IMFSampleGrabberSinkCallback)
        ['{ca86aa50-c46e-429e-ab27-16d6ac6844cb}']
        function OnProcessSampleEx(const guidMajorMediaType: TGUID; dwSampleFlags: DWORD; llSampleTime: LONGLONG;
            llSampleDuration: LONGLONG; const pSampleBuffer: PBYTE; dwSampleSize: DWORD; pAttributes: IMFAttributes): HResult; stdcall;
    end;

    IMFWorkQueueServices = interface(IUnknown)
        ['{35FE1BB8-A3A9-40fe-BBEC-EB569C9CCCA3}']
        function BeginRegisterTopologyWorkQueuesWithMMCSS(pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function EndRegisterTopologyWorkQueuesWithMMCSS(pResult: IMFAsyncResult): HResult; stdcall;
        function BeginUnregisterTopologyWorkQueuesWithMMCSS(pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function EndUnregisterTopologyWorkQueuesWithMMCSS(pResult: IMFAsyncResult): HResult; stdcall;
        function GetTopologyWorkQueueMMCSSClass(dwTopologyWorkQueueId: DWORD; out pwszClass: PLPWSTR; var pcchClass: DWORD): HResult; stdcall;
        function GetTopologyWorkQueueMMCSSTaskId(dwTopologyWorkQueueId: DWORD; out pdwTaskId: DWORD): HResult; stdcall;
        function BeginRegisterPlatformWorkQueueWithMMCSS(dwPlatformWorkQueue: DWORD; wszClass: LPCWSTR; dwTaskId: DWORD;
            pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function EndRegisterPlatformWorkQueueWithMMCSS(pResult: IMFAsyncResult; out pdwTaskId: DWORD): HResult; stdcall;
        function BeginUnregisterPlatformWorkQueueWithMMCSS(dwPlatformWorkQueue: DWORD; pCallback: IMFAsyncCallback;
            pState: IUnknown): HResult; stdcall;
        function EndUnregisterPlatformWorkQueueWithMMCSS(pResult: IMFAsyncResult): HResult; stdcall;
        function GetPlaftormWorkQueueMMCSSClass(dwPlatformWorkQueueId: DWORD; out pwszClass: PLPWSTR; var pcchClass: DWORD): HResult; stdcall;
        function GetPlatformWorkQueueMMCSSTaskId(dwPlatformWorkQueueId: DWORD; out pdwTaskId: DWORD): HResult; stdcall;
    end;

    IMFWorkQueueServicesEx = interface(IMFWorkQueueServices)
        ['{96bf961b-40fe-42f1-ba9d-320238b49700}']
        function GetTopologyWorkQueueMMCSSPriority(dwTopologyWorkQueueId: DWORD; out plPriority: longint): HResult; stdcall;
        function BeginRegisterPlatformWorkQueueWithMMCSSEx(dwPlatformWorkQueue: DWORD; wszClass: LPCWSTR; dwTaskId: DWORD;
            lPriority: longint; pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function GetPlatformWorkQueueMMCSSPriority(dwPlatformWorkQueueId: DWORD; out plPriority: longint): HResult; stdcall;
    end;

    TMF_QUALITY_DROP_MODE = (MF_DROP_MODE_NONE = 0, MF_DROP_MODE_1 = $1, MF_DROP_MODE_2 = $2, MF_DROP_MODE_3 = $3,
        MF_DROP_MODE_4 = $4, MF_DROP_MODE_5 = $5,
        MF_NUM_DROP_MODES = $6);

    TMF_QUALITY_LEVEL = (MF_QUALITY_NORMAL = 0, MF_QUALITY_NORMAL_MINUS_1 = $1, MF_QUALITY_NORMAL_MINUS_2 = $2, MF_QUALITY_NORMAL_MINUS_3 = $3,
        MF_QUALITY_NORMAL_MINUS_4 = $4, MF_QUALITY_NORMAL_MINUS_5 = $5, MF_NUM_QUALITY_LEVELS = $6);

    TMF_QUALITY_ADVISE_FLAGS = (MF_QUALITY_CANNOT_KEEP_UP = $1);

    IMFQualityManager = interface(IUnknown)
        ['{8D009D86-5B9F-4115-B1FC-9F80D52AB8AB}']
        function NotifyTopology(pTopology: IMFTopology): HResult; stdcall;
        function NotifyPresentationClock(pClock: IMFPresentationClock): HResult; stdcall;
        function NotifyProcessInput(pNode: IMFTopologyNode; lInputIndex: longint; pSample: IMFSample): HResult; stdcall;
        function NotifyProcessOutput(pNode: IMFTopologyNode; lOutputIndex: longint; pSample: IMFSample): HResult; stdcall;
        function NotifyQualityEvent(pObject: IUnknown; pEvent: IMFMediaEvent): HResult; stdcall;
        function Shutdown(): HResult; stdcall;
    end;

    IMFQualityAdvise = interface(IUnknown)
        ['{EC15E2E9-E36B-4f7c-8758-77D452EF4CE7}']
        function SetDropMode(eDropMode: TMF_QUALITY_DROP_MODE): HResult; stdcall;
        function SetQualityLevel(eQualityLevel: TMF_QUALITY_LEVEL): HResult; stdcall;
        function GetDropMode(out peDropMode: TMF_QUALITY_DROP_MODE): HResult; stdcall;
        function GetQualityLevel(out peQualityLevel: TMF_QUALITY_LEVEL): HResult; stdcall;
        function DropTime(hnsAmountToDrop: LONGLONG): HResult; stdcall;
    end;

    IMFQualityAdvise2 = interface(IMFQualityAdvise)
        ['{F3706F0D-8EA2-4886-8000-7155E9EC2EAE}']
        function NotifyQualityEvent(pEvent: IMFMediaEvent; out pdwFlags: DWORD): HResult; stdcall;
    end;

    IMFQualityAdviseLimits = interface(IUnknown)
        ['{dfcd8e4d-30b5-4567-acaa-8eb5b7853dc9}']
        function GetMaximumDropMode(out peDropMode: TMF_QUALITY_DROP_MODE): HResult; stdcall;
        function GetMinimumQualityLevel(out peQualityLevel: TMF_QUALITY_LEVEL): HResult; stdcall;
    end;

    IMFRealTimeClient = interface(IUnknown)
        ['{2347D60B-3FB5-480c-8803-8DF3ADCD3EF0}']
        function RegisterThreads(dwTaskIndex: DWORD; wszClass: LPCWSTR): HResult; stdcall;
        function UnregisterThreads(): HResult; stdcall;
        function SetWorkQueue(dwWorkQueueId: DWORD): HResult; stdcall;
    end;

    IMFRealTimeClientEx = interface(IUnknown)
        ['{03910848-AB16-4611-B100-17B88AE2F248}']
        function RegisterThreadsEx(var pdwTaskIndex: DWORD; wszClassName: LPCWSTR; lBasePriority: longint): HResult; stdcall;
        function UnregisterThreads(): HResult; stdcall;
        function SetWorkQueueEx(dwMultithreadedWorkQueueId: DWORD; lWorkItemBasePriority: longint): HResult; stdcall;
    end;

    TMFSequencerElementId = DWORD;

    TMFSequencerTopologyFlags = (SequencerTopologyFlags_Last = $1);

    IMFSequencerSource = interface(IUnknown)
        ['{197CD219-19CB-4de1-A64C-ACF2EDCBE59E}']
        function AppendTopology(pTopology: IMFTopology; dwFlags: DWORD; out pdwId: TMFSequencerElementId): HResult; stdcall;
        function DeleteTopology(dwId: TMFSequencerElementId): HResult; stdcall;
        function GetPresentationContext(pPD: IMFPresentationDescriptor; out pid: TMFSequencerElementId;
            out ppTopology: IMFTopology): HResult; stdcall;
        function UpdateTopology(dwId: TMFSequencerElementId; pTopology: IMFTopology): HResult; stdcall;
        function UpdateTopologyFlags(dwId: TMFSequencerElementId; dwFlags: DWORD): HResult; stdcall;
    end;

    IMFMediaSourceTopologyProvider = interface(IUnknown)
        ['{0E1D6009-C9F3-442d-8C51-A42D2D49452F}']
        function GetMediaSourceTopology(pPresentationDescriptor: IMFPresentationDescriptor; out ppTopology: IMFTopology): HResult; stdcall;
    end;

    IMFMediaSourcePresentationProvider = interface(IUnknown)
        ['{0E1D600a-C9F3-442d-8C51-A42D2D49452F}']
        function ForceEndOfPresentation(pPresentationDescriptor: IMFPresentationDescriptor): HResult; stdcall;
    end;

    TMFTOPONODE_ATTRIBUTE_UPDATE = record
        NodeId: TTOPOID;
        guidAttributeKey: TGUID;
        attrType: TMF_ATTRIBUTE_TYPE;
        case integer of
            0: (u32: UINT32);
            1: (u64: UINT64);
            2: (d: double);
    end;

    PMFTOPONODE_ATTRIBUTE_UPDATE = ^TMFTOPONODE_ATTRIBUTE_UPDATE;

    IMFTopologyNodeAttributeEditor = interface(IUnknown)
        ['{676aa6dd-238a-410d-bb99-65668d01605a}']
        function UpdateNodeAttributes(TOPOID: TTOPOID; cUpdates: DWORD; pUpdates {arraysize cUpdates}: PMFTOPONODE_ATTRIBUTE_UPDATE): HResult;
            stdcall;
    end;

    TMF_LEAKY_BUCKET_PAIR = record
        dwBitrate: DWORD;
        msBufferWindow: DWORD;
    end;

    PMF_LEAKY_BUCKET_PAIR = ^TMF_LEAKY_BUCKET_PAIR;

    TMFBYTESTREAM_BUFFERING_PARAMS = record
        cbTotalFileSize: QWORD;
        cbPlayableDataSize: QWORD;
        prgBuckets: PMF_LEAKY_BUCKET_PAIR;
        cBuckets: DWORD;
        qwNetBufferingTime: QWORD;
        qwExtraBufferingTimeDuringSeek: QWORD;
        qwPlayDuration: QWORD;
        dRate: single;
    end;

    PMFBYTESTREAM_BUFFERING_PARAMS = ^TMFBYTESTREAM_BUFFERING_PARAMS;

    IMFByteStreamBuffering = interface(IUnknown)
        ['{6d66d782-1d4f-4db7-8c63-cb8c77f1ef5e}']
        function SetBufferingParams(pParams: PMFBYTESTREAM_BUFFERING_PARAMS): HResult; stdcall;
        function EnableBuffering(fEnable: boolean): HResult; stdcall;
        function StopBuffering(): HResult; stdcall;
    end;

    IMFByteStreamCacheControl = interface(IUnknown)
        ['{F5042EA4-7A96-4a75-AA7B-2BE1EF7F88D5}']
        function StopBackgroundTransfer(): HResult; stdcall;
    end;

    IMFByteStreamTimeSeek = interface(IUnknown)
        ['{64976BFA-FB61-4041-9069-8C9A5F659BEB}']
        function IsTimeSeekSupported(out pfTimeSeekIsSupported: boolean): HResult; stdcall;
        function TimeSeek(qwTimePosition: QWORD): HResult; stdcall;
        function GetTimeSeekResult(out pqwStartTime: QWORD; out pqwStopTime: QWORD; out pqwDuration: QWORD): HResult; stdcall;
    end;

    TMF_BYTE_STREAM_CACHE_RANGE = record
        qwStartOffset: QWORD;
        qwEndOffset: QWORD;
    end;

    PMF_BYTE_STREAM_CACHE_RANGE = ^TMF_BYTE_STREAM_CACHE_RANGE;

    IMFByteStreamCacheControl2 = interface(IMFByteStreamCacheControl)
        ['{71CE469C-F34B-49EA-A56B-2D2A10E51149}']
        function GetByteRanges(out pcRanges: DWORD; out ppRanges{arraysize pcRanges}: PMF_BYTE_STREAM_CACHE_RANGE): HResult; stdcall;
        function SetCacheLimit(qwBytes: QWORD): HResult; stdcall;
        function IsBackgroundTransferActive(out pfActive: boolean): HResult; stdcall;
    end;

    IMFNetCredential = interface(IUnknown)
        ['{5b87ef6a-7ed8-434f-ba0e-184fac1628d1}']
        function SetUser(pbData: PBYTE; cbData: DWORD; fDataIsEncrypted: boolean): HResult; stdcall;
        function SetPassword(pbData: PBYTE; cbData: DWORD; fDataIsEncrypted: boolean): HResult; stdcall;
        function GetUser(out pbData: PBYTE; var pcbData: DWORD; fEncryptData: boolean): HResult; stdcall;
        function GetPassword(out pbData: PBYTE; var pcbData: DWORD; fEncryptData: boolean): HResult; stdcall;
        function LoggedOnUser(out pfLoggedOnUser: boolean): HResult; stdcall;
    end;

    TMFNetCredentialManagerGetParam = record   // ToDo: checksize of
        hrOp: HResult;
        fAllowLoggedOnUser: longbool; // ToDo: checksize of
        fClearTextPackage: longbool; // ToDo: checksize of
        pszUrl: LPCWSTR;
        pszSite: LPCWSTR;
        pszRealm: LPCWSTR;
        pszPackage: LPCWSTR;
        nRetries: longint;
    end;

    PMFNetCredentialManagerGetParam = ^TMFNetCredentialManagerGetParam;

    IMFNetCredentialManager = interface(IUnknown)
        ['{5b87ef6b-7ed8-434f-ba0e-184fac1628d1}']
        function BeginGetCredentials(pParam: PMFNetCredentialManagerGetParam; pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function EndGetCredentials(pResult: IMFAsyncResult; out ppCred: IMFNetCredential): HResult; stdcall;
        function SetGood(pCred: IMFNetCredential; fGood: boolean): HResult; stdcall;
    end;

    TMFNetCredentialRequirements = (REQUIRE_PROMPT = $1, REQUIRE_SAVE_SELECTED = $2);

    TMFNetCredentialOptions = (MFNET_CREDENTIAL_SAVE = $1, MFNET_CREDENTIAL_DONT_CACHE = $2, MFNET_CREDENTIAL_ALLOW_CLEAR_TEXT = $4);

    TMFNetAuthenticationFlags = (MFNET_AUTHENTICATION_PROXY = $1, MFNET_AUTHENTICATION_CLEAR_TEXT = $2, MFNET_AUTHENTICATION_LOGGED_ON_USER = $4);

    IMFNetCredentialCache = interface(IUnknown)
        ['{5b87ef6c-7ed8-434f-ba0e-184fac1628d1}']
        function GetCredential(pszUrl: LPCWSTR; pszRealm: LPCWSTR; dwAuthenticationFlags: DWORD; out ppCred: IMFNetCredential;
            out pdwRequirementsFlags: DWORD): HResult; stdcall;
        function SetGood(pCred: IMFNetCredential; fGood: boolean): HResult; stdcall;
        function SetUserOptions(pCred: IMFNetCredential; dwOptionsFlags: DWORD): HResult; stdcall;
    end;

    IMFSSLCertificateManager = interface(IUnknown)
        ['{61f7d887-1230-4a8b-aeba-8ad434d1a64d}']
        function GetClientCertificate(pszUrl: LPCWSTR; out ppbData: PBYTE; out pcbData: DWORD): HResult; stdcall;
        function BeginGetClientCertificate(pszUrl: LPCWSTR; pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function EndGetClientCertificate(pResult: IMFAsyncResult; out ppbData: PBYTE; out pcbData: DWORD): HResult; stdcall;
        function GetCertificatePolicy(pszUrl: LPCWSTR; out pfOverrideAutomaticCheck: boolean;
            out pfClientCertificateAvailable: boolean): HResult; stdcall;
        function OnServerCertificate(pszUrl: LPCWSTR; pbData: PBYTE; cbData: DWORD; out pfIsGood: boolean): HResult; stdcall;
    end;

    IMFNetResourceFilter = interface(IUnknown)
        ['{091878a3-bf11-4a5c-bc9f-33995b06ef2d}']
        function OnRedirect(pszUrl: LPCWSTR; out pvbCancel: VARIANT_BOOL): HResult; stdcall;
        function OnSendingRequest(pszUrl: LPCWSTR): HResult; stdcall;
    end;

    IMFSourceOpenMonitor = interface(IUnknown)
        ['{059054B3-027C-494C-A27D-9113291CF87F}']
        function OnSourceEvent(pEvent: IMFMediaEvent): HResult; stdcall;
    end;

    IMFNetProxyLocator = interface(IUnknown)
        ['{e9cd0383-a268-4bb4-82de-658d53574d41}']
        function FindFirstProxy(pszHost: LPCWSTR; pszUrl: LPCWSTR; fReserved: boolean): HResult; stdcall;
        function FindNextProxy(): HResult; stdcall;
        function RegisterProxyResult(hrOp: HResult): HResult; stdcall;
        function GetCurrentProxy(out pszStr: PLPWSTR; var pcchStr: DWORD): HResult; stdcall;
        function Clone(out ppProxyLocator: IMFNetProxyLocator): HResult; stdcall;
    end;

    IMFNetProxyLocatorFactory = interface(IUnknown)
        ['{e9cd0384-a268-4bb4-82de-658d53574d41}']
        function CreateProxyLocator(pszProtocol: LPCWSTR; out ppProxyLocator: IMFNetProxyLocator): HResult; stdcall;
    end;

    IMFSaveJob = interface(IUnknown)
        ['{e9931663-80bf-4c6e-98af-5dcf58747d1f}']
        function BeginSave(pStream: IMFByteStream; pCallback: IMFAsyncCallback; pState: IUnknown): HResult; stdcall;
        function EndSave(pResult: IMFAsyncResult): HResult; stdcall;
        function CancelSave(): HResult; stdcall;
        function GetProgress(out pdwPercentComplete: DWORD): HResult; stdcall;
    end;

    TMFNETSOURCE_PROTOCOL_TYPE = (MFNETSOURCE_UNDEFINED = 0, MFNETSOURCE_HTTP = $1, MFNETSOURCE_RTSP = $2,
        MFNETSOURCE_FILE = $3, MFNETSOURCE_MULTICAST = $4);

    IMFNetSchemeHandlerConfig = interface(IUnknown)
        ['{7BE19E73-C9BF-468a-AC5A-A5E8653BEC87}']
        function GetNumberOfSupportedProtocols(out pcProtocols: ULONG): HResult; stdcall;
        function GetSupportedProtocolType(nProtocolIndex: ULONG; out pnProtocolType: TMFNETSOURCE_PROTOCOL_TYPE): HResult; stdcall;
        function ResetProtocolRolloverSettings(): HResult; stdcall;
    end;

    TMFNETSOURCE_TRANSPORT_TYPE = (MFNETSOURCE_UDP = 0, MFNETSOURCE_TCP = (MFNETSOURCE_UDP + 1));

    TMFNETSOURCE_CACHE_STATE = (MFNETSOURCE_CACHE_UNAVAILABLE = 0, MFNETSOURCE_CACHE_ACTIVE_WRITING = (MFNETSOURCE_CACHE_UNAVAILABLE + 1),
        MFNETSOURCE_CACHE_ACTIVE_COMPLETE = (MFNETSOURCE_CACHE_ACTIVE_WRITING + 1));

    TMFNETSOURCE_STATISTICS_IDS = (
        MFNETSOURCE_RECVPACKETS_ID = 0,
        MFNETSOURCE_LOSTPACKETS_ID = (MFNETSOURCE_RECVPACKETS_ID + 1),
        MFNETSOURCE_RESENDSREQUESTED_ID = (MFNETSOURCE_LOSTPACKETS_ID + 1),
        MFNETSOURCE_RESENDSRECEIVED_ID = (MFNETSOURCE_RESENDSREQUESTED_ID + 1),
        MFNETSOURCE_RECOVEREDBYECCPACKETS_ID = (MFNETSOURCE_RESENDSRECEIVED_ID + 1),
        MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID = (MFNETSOURCE_RECOVEREDBYECCPACKETS_ID + 1),
        MFNETSOURCE_OUTPACKETS_ID = (MFNETSOURCE_RECOVEREDBYRTXPACKETS_ID + 1),
        MFNETSOURCE_RECVRATE_ID = (MFNETSOURCE_OUTPACKETS_ID + 1),
        MFNETSOURCE_AVGBANDWIDTHBPS_ID = (MFNETSOURCE_RECVRATE_ID + 1),
        MFNETSOURCE_BYTESRECEIVED_ID = (MFNETSOURCE_AVGBANDWIDTHBPS_ID + 1),
        MFNETSOURCE_PROTOCOL_ID = (MFNETSOURCE_BYTESRECEIVED_ID + 1),
        MFNETSOURCE_TRANSPORT_ID = (MFNETSOURCE_PROTOCOL_ID + 1),
        MFNETSOURCE_CACHE_STATE_ID = (MFNETSOURCE_TRANSPORT_ID + 1),
        MFNETSOURCE_LINKBANDWIDTH_ID = (MFNETSOURCE_CACHE_STATE_ID + 1),
        MFNETSOURCE_CONTENTBITRATE_ID = (MFNETSOURCE_LINKBANDWIDTH_ID + 1),
        MFNETSOURCE_SPEEDFACTOR_ID = (MFNETSOURCE_CONTENTBITRATE_ID + 1),
        MFNETSOURCE_BUFFERSIZE_ID = (MFNETSOURCE_SPEEDFACTOR_ID + 1),
        MFNETSOURCE_BUFFERPROGRESS_ID = (MFNETSOURCE_BUFFERSIZE_ID + 1),
        MFNETSOURCE_LASTBWSWITCHTS_ID = (MFNETSOURCE_BUFFERPROGRESS_ID + 1),
        MFNETSOURCE_SEEKRANGESTART_ID = (MFNETSOURCE_LASTBWSWITCHTS_ID + 1),
        MFNETSOURCE_SEEKRANGEEND_ID = (MFNETSOURCE_SEEKRANGESTART_ID + 1),
        MFNETSOURCE_BUFFERINGCOUNT_ID = (MFNETSOURCE_SEEKRANGEEND_ID + 1),
        MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID = (MFNETSOURCE_BUFFERINGCOUNT_ID + 1),
        MFNETSOURCE_SIGNEDSESSION_ID = (MFNETSOURCE_INCORRECTLYSIGNEDPACKETS_ID + 1),
        MFNETSOURCE_MAXBITRATE_ID = (MFNETSOURCE_SIGNEDSESSION_ID + 1),
        MFNETSOURCE_RECEPTION_QUALITY_ID = (MFNETSOURCE_MAXBITRATE_ID + 1),
        MFNETSOURCE_RECOVEREDPACKETS_ID = (MFNETSOURCE_RECEPTION_QUALITY_ID + 1),
        MFNETSOURCE_VBR_ID = (MFNETSOURCE_RECOVEREDPACKETS_ID + 1),
        MFNETSOURCE_DOWNLOADPROGRESS_ID = (MFNETSOURCE_VBR_ID + 1),
        MFNETSOURCE_UNPREDEFINEDPROTOCOLNAME_ID = (MFNETSOURCE_DOWNLOADPROGRESS_ID + 1)
        );

    TMFNET_PROXYSETTINGS = (MFNET_PROXYSETTING_NONE = 0, MFNET_PROXYSETTING_MANUAL = 1, MFNET_PROXYSETTING_AUTO = 2, MFNET_PROXYSETTING_BROWSER = 3);

    IMFSchemeHandler = interface(IUnknown)
        ['{6D4C7B74-52A0-4bb7-B0DB-55F29F47A668}']
        function BeginCreateObject(pwszURL: LPCWSTR; dwFlags: DWORD; pProps: IPropertyStore; out ppIUnknownCancelCookie: IUnknown;
            pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndCreateObject(pResult: IMFAsyncResult; out pObjectType: TMF_OBJECT_TYPE; out ppObject: IUnknown): HResult; stdcall;
        function CancelObjectCreation(pIUnknownCancelCookie: IUnknown): HResult; stdcall;
    end;

    IMFByteStreamHandler = interface(IUnknown)
        ['{BB420AA4-765B-4a1f-91FE-D6A8A143924C}']
        function BeginCreateObject(pByteStream: IMFByteStream; pwszURL: LPCWSTR; dwFlags: DWORD; pProps: IPropertyStore;
            out ppIUnknownCancelCookie: IUnknown; pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndCreateObject(pResult: IMFAsyncResult; out pObjectType: TMF_OBJECT_TYPE; out ppObject: IUnknown): HResult; stdcall;
        function CancelObjectCreation(pIUnknownCancelCookie: IUnknown): HResult; stdcall;
        function GetMaxNumberOfBytesRequiredForResolution(out pqwBytes: QWORD): HResult; stdcall;

    end;

    IMFTrustedInput = interface(IUnknown)
        ['{542612C4-A1B8-4632-B521-DE11EA64A0B0}']
        function GetInputTrustAuthority(dwStreamID: DWORD; const riid: TGUID; out ppunkObject: IUnknown): HResult; stdcall;
    end;

    TMFPOLICYMANAGER_ACTION = (PEACTION_NO = 0, PEACTION_PLAY = 1, PEACTION_COPY = 2, PEACTION_EXPORT = 3,
        PEACTION_EXTRACT = 4, PEACTION_RESERVED1 = 5,
        PEACTION_RESERVED2 = 6, PEACTION_RESERVED3 = 7, PEACTION_LAST = 7);

    TMFINPUTTRUSTAUTHORITY_ACTION = record
        Action: TMFPOLICYMANAGER_ACTION;
        pbTicket: PBYTE;
        cbTicket: DWORD;
    end;

    PMFINPUTTRUSTAUTHORITY_ACTION = ^TMFINPUTTRUSTAUTHORITY_ACTION;
    TMFINPUTTRUSTAUTHORITY_ACCESS_ACTION = TMFINPUTTRUSTAUTHORITY_ACTION;
    PMFINPUTTRUSTAUTHORITY_ACCESS_ACTION = ^TMFINPUTTRUSTAUTHORITY_ACCESS_ACTION;

    TMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = record
        dwSize: DWORD;
        dwVer: DWORD;
        cbSignatureOffset: DWORD;
        cbSignatureSize: DWORD;
        cbExtensionOffset: DWORD;
        cbExtensionSize: DWORD;
        cActions: DWORD;
        rgOutputActions: PMFINPUTTRUSTAUTHORITY_ACCESS_ACTION;
    end;

    PMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS = ^TMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS;

    IMFInputTrustAuthority = interface(IUnknown)
        ['{D19F8E98-B126-4446-890C-5DCB7AD71453}']
        function GetDecrypter(const riid: TGUID; out ppv: pointer): HResult; stdcall;
        function RequestAccess(Action: TMFPOLICYMANAGER_ACTION; out ppContentEnablerActivate: IMFActivate): HResult; stdcall;
        function GetPolicy(Action: TMFPOLICYMANAGER_ACTION; out ppPolicy: IMFOutputPolicy): HResult; stdcall;
        function BindAccess(pParam: PMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS): HResult; stdcall;
        function UpdateAccess(pParam: PMFINPUTTRUSTAUTHORITY_ACCESS_PARAMS): HResult; stdcall;
        function Reset(): HResult; stdcall;
    end;

    IMFTrustedOutput = interface(IUnknown)
        ['{D19F8E95-B126-4446-890C-5DCB7AD71453}']
        function GetOutputTrustAuthorityCount(out pcOutputTrustAuthorities: DWORD): HResult; stdcall;
        function GetOutputTrustAuthorityByIndex(dwIndex: DWORD; out ppauthority: IMFOutputTrustAuthority): HResult; stdcall;
        function IsFinal(out pfIsFinal: boolean): HResult; stdcall;
    end;

    IMFOutputTrustAuthority = interface(IUnknown)
        ['{D19F8E94-B126-4446-890C-5DCB7AD71453}']
        function GetAction(out pAction: TMFPOLICYMANAGER_ACTION): HResult; stdcall;
        function SetPolicy(ppPolicy { arraysize nPolicy}: PIMFOutputPolicy; nPolicy: DWORD; out ppbTicket: PBYTE;
            out pcbTicket: DWORD): HResult; stdcall;
    end;

    IMFOutputPolicy = interface(IMFAttributes)
        ['{7F00F10A-DAED-41AF-AB26-5FDFA4DFBA3C}']
        function GenerateRequiredSchemas(dwAttributes: DWORD; guidOutputSubType: TGUID; rgGuidProtectionSchemasSupported: PGUID;
            cProtectionSchemasSupported: DWORD; out ppRequiredProtectionSchemas: IMFCollection): HResult; stdcall;
        function GetOriginatorID(out pguidOriginatorID: TGUID): HResult; stdcall;
        function GetMinimumGRLVersion(out pdwMinimumGRLVersion: DWORD): HResult; stdcall;
    end;

    IMFOutputSchema = interface(IMFAttributes)
        ['{7BE0FC5B-ABD9-44FB-A5C8-F50136E71599}']
        function GetSchemaType(out pguidSchemaType: TGUID): HResult; stdcall;
        function GetConfigurationData(out pdwVal: DWORD): HResult; stdcall;
        function GetOriginatorID(out pguidOriginatorID: TGUID): HResult; stdcall;
    end;

    TMF_OPM_CGMSA_PROTECTION_LEVEL = (MF_OPM_CGMSA_OFF = 0, MF_OPM_CGMSA_COPY_FREELY = $1, MF_OPM_CGMSA_COPY_NO_MORE = $2,
        MF_OPM_CGMSA_COPY_ONE_GENERATION = $3, MF_OPM_CGMSA_COPY_NEVER = $4, MF_OPM_CGMSA_REDISTRIBUTION_CONTROL_REQUIRED = $8);

    TMF_OPM_ACP_PROTECTION_LEVEL = (MF_OPM_ACP_OFF = 0, MF_OPM_ACP_LEVEL_ONE = 1, MF_OPM_ACP_LEVEL_TWO = 2, MF_OPM_ACP_LEVEL_THREE = 3,
        MF_OPM_ACP_FORCE_ULONG = $7FFFFFFF);

    TMFAudioConstriction = (MFaudioConstrictionOff = 0, MFaudioConstriction48_16 = (MFaudioConstrictionOff + 1),
        MFaudioConstriction44_16 = (MFaudioConstriction48_16 + 1), MFaudioConstriction14_14 = (MFaudioConstriction44_16 + 1),
        MFaudioConstrictionMute = (MFaudioConstriction14_14 + 1));

    IMFSecureChannel = interface(IUnknown)
        ['{d0ae555d-3b12-4d97-b060-0990bc5aeb67}']
        function GetCertificate(out ppCert: PBYTE; out pcbCert: DWORD): HResult; stdcall;
        function SetupSession(pbEncryptedSessionKey: PBYTE; cbSessionKey: DWORD): HResult; stdcall;
    end;

    TSAMPLE_PROTECTION_VERSION = (SAMPLE_PROTECTION_VERSION_NO = 0, SAMPLE_PROTECTION_VERSION_BASIC_LOKI = 1, SAMPLE_PROTECTION_VERSION_SCATTER = 2,
        SAMPLE_PROTECTION_VERSION_RC4 = 3, SAMPLE_PROTECTION_VERSION_AES128CTR = 4);

    IMFSampleProtection = interface(IUnknown)
        ['{8e36395f-c7b9-43c4-a54d-512b4af63c95}']
        function GetInputProtectionVersion(out pdwVersion: DWORD): HResult; stdcall;
        function GetOutputProtectionVersion(out pdwVersion: DWORD): HResult; stdcall;
        function GetProtectionCertificate(dwVersion: DWORD; out ppCert: PBYTE; out pcbCert: DWORD): HResult; stdcall;
        function InitOutputProtection(dwVersion: DWORD; dwOutputId: DWORD; pbCert: PBYTE; cbCert: DWORD; out ppbSeed: PBYTE;
            out pcbSeed: DWORD): HResult;
            stdcall;
        function InitInputProtection(dwVersion: DWORD; dwInputId: DWORD; pbSeed: PBYTE; cbSeed: DWORD): HResult; stdcall;
    end;

    IMFMediaSinkPreroll = interface(IUnknown)
        ['{5dfd4b2a-7674-4110-a4e6-8a68fd5f3688}']
        function NotifyPreroll(hnsUpcomingStartTime: TMFTIME): HResult; stdcall;
    end;

    IMFFinalizableMediaSink = interface(IMFMediaSink)
        ['{EAECB74A-9A50-42ce-9541-6A7F57AA4AD7}']
        function BeginFinalize(pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndFinalize(pResult: IMFAsyncResult): HResult; stdcall;
    end;

    IMFStreamingSinkConfig = interface(IUnknown)
        ['{9db7aa41-3cc5-40d4-8509-555804ad34cc}']
        function StartStreaming(fSeekOffsetIsByteOffset: boolean; qwSeekOffset: QWORD): HResult; stdcall;
    end;

    IMFRemoteProxy = interface(IUnknown)
        ['{994e23ad-1cc2-493c-b9fa-46f1cb040fa4}']
        function GetRemoteObject(const riid: TGUID; out ppv: pointer): HResult; stdcall;
        function GetRemoteHost(const riid: TGUID; out ppv: pointer): HResult; stdcall;
    end;

    IMFObjectReferenceStream = interface(IUnknown)
        ['{09EF5BE3-C8A7-469e-8B70-73BF25BB193F}']
        function SaveReference(const riid: TGUID; pUnk: IUnknown): HResult; stdcall;
        function LoadReference(const riid: TGUID; out ppv: pointer): HResult; stdcall;
    end;

    IMFPMPHost = interface(IUnknown)
        ['{F70CA1A9-FDC7-4782-B994-ADFFB1C98606}']
        function LockProcess(): HResult; stdcall;
        function UnlockProcess(): HResult; stdcall;
        function CreateObjectByCLSID(const CLSID: CLSID; pStream: IStream; const riid: TGUID; out ppv): HResult; stdcall;
    end;

    IMFPMPClient = interface(IUnknown)
        ['{6C4E655D-EAD8-4421-B6B9-54DCDBBDF820}']
        function SetPMPHost(pPMPHost: IMFPMPHost): HResult; stdcall;
    end;

    IMFPMPServer = interface(IUnknown)
        ['{994e23af-1cc2-493c-b9fa-46f1cb040fa4}']
        function LockProcess(): HResult; stdcall;
        function UnlockProcess(): HResult; stdcall;
        function CreateObjectByCLSID(const CLSID: CLSID; const riid: TGUID; out ppObject): HResult; stdcall;
    end;

    IMFRemoteDesktopPlugin = interface(IUnknown)
        ['{1cde6309-cae0-4940-907e-c1ec9c3d1d4a}']
        function UpdateTopology(var pTopology: IMFTopology): HResult; stdcall;
    end;

    IMFSAMIStyle = interface(IUnknown)
        ['{A7E025DD-5303-4a62-89D6-E747E1EFAC73}']
        function GetStyleCount(out pdwCount: DWORD): HResult; stdcall;
        function GetStyles(out pPropVarStyleArray: PPROPVARIANT): HResult; stdcall;
        function SetSelectedStyle(pwszStyle: LPCWSTR): HResult; stdcall;
        function GetSelectedStyle(out ppwszStyle: LPWSTR): HResult; stdcall;
    end;

    IMFTranscodeProfile = interface(IUnknown)
        ['{4ADFDBA3-7AB0-4953-A62B-461E7FF3DA1E}']
        function SetAudioAttributes(pAttrs: IMFAttributes): HResult; stdcall;
        function GetAudioAttributes(out ppAttrs: IMFAttributes): HResult; stdcall;
        function SetVideoAttributes(pAttrs: IMFAttributes): HResult; stdcall;
        function GetVideoAttributes(out ppAttrs: IMFAttributes): HResult; stdcall;
        function SetContainerAttributes(pAttrs: IMFAttributes): HResult; stdcall;
        function GetContainerAttributes(out ppAttrs: IMFAttributes): HResult; stdcall;
    end;

    TMF_TRANSCODE_TOPOLOGYMODE_FLAGS = (MF_TRANSCODE_TOPOLOGYMODE_SOFTWARE_ONLY = 0, MF_TRANSCODE_TOPOLOGYMODE_HARDWARE_ALLOWED = 1);

    TMF_TRANSCODE_ADJUST_PROFILE_FLAGS = (MF_TRANSCODE_ADJUST_PROFILE_DEFAULT = 0, MF_TRANSCODE_ADJUST_PROFILE_USE_SOURCE_ATTRIBUTES = 1);

    TMF_VIDEO_PROCESSOR_ALGORITHM_TYPE = (MF_VIDEO_PROCESSOR_ALGORITHM_DEFAULT = 0, MF_VIDEO_PROCESSOR_ALGORITHM_MRF_CRF_444 = 1);

    TMF_TRANSCODE_SINK_INFO = record
        dwVideoStreamID: DWORD;
        pVideoMediaType: IMFMediaType;
        dwAudioStreamID: DWORD;
        pAudioMediaType: IMFMediaType;
    end;

    IMFFieldOfUseMFTUnlock = interface(IUnknown)
        ['{508E71D3-EC66-4fc3-8775-B4B9ED6BA847}']
        function Unlock(pUnkMFT: IUnknown): HResult; stdcall;
    end;

    TMFT_REGISTRATION_INFO = record
        CLSID: CLSID;
        guidCategory: TGUID;
        uiFlags: UINT32;
        pszName: LPCWSTR;
        cInTypes: DWORD;
        pInTypes: PMFT_REGISTER_TYPE_INFO;
        cOutTypes: DWORD;
        pOutTypes: PMFT_REGISTER_TYPE_INFO;
    end;

    PMFT_REGISTRATION_INFO = ^TMFT_REGISTRATION_INFO;

    IMFLocalMFTRegistration = interface(IUnknown)
        ['{149c4d73-b4be-4f8d-8b87-079e926b6add}']
        function RegisterMFTs(pMFTs{arraysize cMFTs}: PMFT_REGISTRATION_INFO; cMFTs: DWORD): HResult; stdcall;
    end;

    IMFPMPHostApp = interface(IUnknown)
        ['{84d2054a-3aa1-4728-a3b0-440a418cf49c}']
        function LockProcess(): HResult; stdcall;
        function UnlockProcess(): HResult; stdcall;
        function ActivateClassById(id: LPCWSTR; pStream: IStream; const riid: TGUID; out ppv): HResult; stdcall;
    end;

    IMFPMPClientApp = interface(IUnknown)
        ['{c004f646-be2c-48f3-93a2-a0983eba1108}']
        function SetPMPHost(pPMPHost: IMFPMPHostApp): HResult; stdcall;
    end;

    IMFMediaStreamSourceSampleRequest = interface(IUnknown)
        ['{380b9af9-a85b-4e78-a2af-ea5ce645c6b4}']
        function SetSample(Value: IMFSample): HResult; stdcall;
    end;

    IMFTrackedSample = interface(IUnknown)
        ['{245BF8E9-0755-40f7-88A5-AE0F18D55E17}']
        function SetAllocator(pSampleAllocator: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
    end;

    IMFProtectedEnvironmentAccess = interface(IUnknown)
        ['{ef5dc845-f0d9-4ec9-b00c-cb5183d38434}']
        function Call(inputLength: UINT32; const input: PBYTE; outputLength: UINT32; out output: PBYTE): HResult; stdcall;
        function ReadGRL(out outputLength: UINT32; out output: PBYTE): HResult; stdcall;
    end;

    IMFSignedLibrary = interface(IUnknown)
        ['{4a724bca-ff6a-4c07-8e0d-7a358421cf06}']
        function GetProcedureAddress(Name: LPCSTR; out address: pointer): HResult; stdcall;
    end;

    IMFSystemId = interface(IUnknown)
        ['{fff4af3a-1fc1-4ef9-a29b-d26c49e2f31a}']
        function GetData(out size: UINT32; out Data: PBYTE): HResult; stdcall;
        function Setup(stage: UINT32; cbIn: UINT32; const pbIn: PBYTE; out pcbOut: UINT32; out ppbOut: PBYTE): HResult; stdcall;
    end;

    TMFCONTENTPROTECTIONDEVICE_INPUT_DATA = record
        HWProtectionFunctionID: DWORD;
        PrivateDataByteCount: DWORD;
        HWProtectionDataByteCount: DWORD;
        Reserved: DWORD;
        InputData: array [0 .. 3] of byte;
    end;

    TMFCONTENTPROTECTIONDEVICE_OUTPUT_DATA = record
        PrivateDataByteCount: DWORD;
        MaxHWProtectionDataByteCount: DWORD;
        HWProtectionDataByteCount: DWORD;
        Status: HResult;
        TransportTimeInHundredsOfNanoseconds: LONGLONG;
        ExecutionTimeInHundredsOfNanoseconds: LONGLONG;
        OutputData: array [0 .. 3] of byte;
    end;

    TMFCONTENTPROTECTIONDEVICE_REALTIMECLIENT_DATA = record
        TaskIndex: DWORD;
        ClassName: array [0 .. MAX_PATH - 1] of WCHAR;
        BasePriority: longint;
    end;

    IMFContentProtectionDevice = interface(IUnknown)
        ['{E6257174-A060-4C9A-A088-3B1B471CAD28}']
        function InvokeFunction(FunctionId: DWORD; InputBufferByteCount: DWORD; const InputBuffer: PBYTE;
            var OutputBufferByteCount: DWORD; out OutputBuffer: PBYTE): HResult; stdcall;
        function GetPrivateDataByteCount(out PrivateInputByteCount: DWORD; out PrivateOutputByteCount: DWORD): HResult; stdcall;
    end;

    IMFContentDecryptorContext = interface(IUnknown)
        ['{7EC4B1BD-43FB-4763-85D2-64FCB5C5F4CB}']
        function InitializeHardwareKey(InputPrivateDataByteCount: UINT; const InputPrivateData: pointer;
            out OutputPrivateData: UINT64): HResult; stdcall;
    end;


    TMF_MEDIAKEYSESSION_TYPE = (
        MF_MEDIAKEYSESSION_TYPE_TEMPORARY = 0,
        MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE = (MF_MEDIAKEYSESSION_TYPE_TEMPORARY + 1),
        MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE = (MF_MEDIAKEYSESSION_TYPE_PERSISTENT_LICENSE + 1),
        MF_MEDIAKEYSESSION_TYPE_PERSISTENT_USAGE_RECORD = (MF_MEDIAKEYSESSION_TYPE_PERSISTENT_RELEASE_MESSAGE + 1)
        );

    TMF_MEDIAKEY_STATUS = (
        MF_MEDIAKEY_STATUS_USABLE = 0,
        MF_MEDIAKEY_STATUS_EXPIRED = (MF_MEDIAKEY_STATUS_USABLE + 1),
        MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED = (MF_MEDIAKEY_STATUS_EXPIRED + 1),
        MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED = (MF_MEDIAKEY_STATUS_OUTPUT_DOWNSCALED + 1),
        MF_MEDIAKEY_STATUS_STATUS_PENDING = (MF_MEDIAKEY_STATUS_OUTPUT_NOT_ALLOWED + 1),
        MF_MEDIAKEY_STATUS_INTERNAL_ERROR = (MF_MEDIAKEY_STATUS_STATUS_PENDING + 1),
        MF_MEDIAKEY_STATUS_RELEASED = (MF_MEDIAKEY_STATUS_INTERNAL_ERROR + 1),
        MF_MEDIAKEY_STATUS_OUTPUT_RESTRICTED = (MF_MEDIAKEY_STATUS_RELEASED + 1)
        );

    TMFMediaKeyStatus = record
        pbKeyId: PBYTE;
        cbKeyId: UINT;
        eMediaKeyStatus: TMF_MEDIAKEY_STATUS;
    end;
    PMFMediaKeyStatus = ^TMFMediaKeyStatus;

    TMF_MEDIAKEYSESSION_MESSAGETYPE = (
        MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_REQUEST = 0,
        MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RENEWAL = 1,
        MF_MEDIAKEYSESSION_MESSAGETYPE_LICENSE_RELEASE = 2,
        MF_MEDIAKEYSESSION_MESSAGETYPE_INDIVIDUALIZATION_REQUEST = 3
        );

    TMF_CROSS_ORIGIN_POLICY = (
        MF_CROSS_ORIGIN_POLICY_NONE = 0,
        MF_CROSS_ORIGIN_POLICY_ANONYMOUS = 1,
        MF_CROSS_ORIGIN_POLICY_USE_CREDENTIALS = 2
        );

    IMFTranscodeSinkInfoProvider = interface(IUnknown)
        ['{8CFFCD2E-5A03-4a3a-AFF7-EDCD107C620E}']
        function SetOutputFile(pwszFileName: LPCWSTR): HResult; stdcall;
        function SetOutputByteStream(ByteStreamActivate: IMFActivate): HResult; stdcall;
        function SetProfile(pProfile: IMFTranscodeProfile): HResult; stdcall;
        function GetSinkInfo(out pSinkInfo: TMF_TRANSCODE_SINK_INFO): HResult; stdcall;
    end;

    IMFCapturePhotoConfirmation = interface(IUnknown)
        ['{19f68549-ca8a-4706-a4ef-481dbc95e12c}']
        function SetPhotoConfirmationCallback(pNotificationCallback: IMFAsyncCallback): HResult; stdcall;
        function SetPixelFormat(subtype: TGUID): HResult; stdcall;
        function GetPixelFormat(out subtype: TGUID): HResult; stdcall;
    end;

    IMFNetCrossOriginSupport = interface(IUnknown)
        ['{bc2b7d44-a72d-49d5-8376-1480dee58b22}']
        function GetCrossOriginPolicy(out pPolicy: TMF_CROSS_ORIGIN_POLICY): HResult; stdcall;
        function GetSourceOrigin(out wszSourceOrigin: LPWSTR): HResult; stdcall;
        function IsSameOrigin(wszURL: LPCWSTR; out pfIsSameOrigin: boolean): HResult; stdcall;
    end;

    IMFHttpDownloadRequest = interface(IUnknown)
        ['{F779FDDF-26E7-4270-8A8B-B983D1859DE0}']
        function AddHeader(szHeader: LPCWSTR): HResult; stdcall;
        function BeginSendRequest(const pbPayload: PBYTE; cbPayload: ULONG; pCallback: IMFAsyncCallback;
            punkState: IUnknown): HResult; stdcall;
        function EndSendRequest(pResult: IMFAsyncResult): HResult; stdcall;
        function BeginReceiveResponse(pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndReceiveResponse(pResult: IMFAsyncResult): HResult; stdcall;
        function BeginReadPayload(out pb: PBYTE; cb: ULONG; pCallback: IMFAsyncCallback; punkState: IUnknown): HResult; stdcall;
        function EndReadPayload(pResult: IMFAsyncResult; out pqwOffset: QWORD; out pcbRead: ULONG): HResult; stdcall;
        function QueryHeader(szHeaderName: LPCWSTR; dwIndex: DWORD; out ppszHeaderValue: LPWSTR): HResult; stdcall;
        function GetURL(out ppszURL: LPWSTR): HResult; stdcall;
        function HasNullSourceOrigin(out pfNullSourceOrigin: boolean): HResult; stdcall;
        function GetTimeSeekResult(out pqwStartTime: QWORD; out pqwStopTime: QWORD; out pqwDuration: QWORD): HResult; stdcall;
        function GetHttpStatus(out pdwHttpStatus: DWORD): HResult; stdcall;
        function GetAtEndOfPayload(out pfAtEndOfPayload: boolean): HResult; stdcall;
        function GetTotalLength(out pqwTotalLength: QWORD): HResult; stdcall;
        function GetRangeEndOffset(out pqwRangeEnd: QWORD): HResult; stdcall;
        function Close(): HResult; stdcall;
    end;


    IMFHttpDownloadSession = interface(IUnknown)
        ['{71FA9A2C-53CE-4662-A132-1A7E8CBF62DB}']
        function SetServer(szServerName: LPCWSTR; nPort: DWORD): HResult; stdcall;

        function CreateRequest(szObjectName: LPCWSTR; fBypassProxyCache: boolean; fSecure: boolean; szVerb: LPCWSTR;
            szReferrer: LPCWSTR; out ppRequest: IMFHttpDownloadRequest): HResult; stdcall;

        function Close(): HResult; stdcall;

    end;

    IMFHttpDownloadSessionProvider = interface(IUnknown)
        ['{1B4CF4B9-3A16-4115-839D-03CC5C99DF01}']
        function CreateHttpDownloadSession(wszScheme: LPCWSTR; out ppDownloadSession: IMFHttpDownloadSession): HResult; stdcall;
    end;



    TMF_MEDIASOURCE_STATUS_INFO = (
        MF_MEDIASOURCE_STATUS_INFO_FULLYSUPPORTED = 0,
        MF_MEDIASOURCE_STATUS_INFO_UNKNOWN = 1
        );


    TMF_VIDEO_SPHERICAL_VIEWDIRECTION = record
        iHeading: integer;
        iPitch: integer;
        iRoll: integer;
    end;
    PMF_VIDEO_SPHERICAL_VIEWDIRECTION = ^TMF_VIDEO_SPHERICAL_VIEWDIRECTION;




    IMFMediaSource2 = interface(IMFMediaSourceEx)
        ['{FBB03414-D13B-4786-8319-5AC51FC0A136}']
        function SetMediaType(dwStreamID: DWORD; pMediaType: IMFMediaType): HResult; stdcall;
    end;




    TMF_STREAM_STATE = word; // ToDo

    IMFMediaStream2 = interface(IMFMediaStream)
        ['{C5BC37D6-75C7-46A1-A132-81B5F723C20F}']
        function SetStreamState(Value: TMF_STREAM_STATE): HResult; stdcall;
        function GetStreamState(out Value: TMF_STREAM_STATE): HResult; stdcall;
    end;


    TMFSensorDeviceType = (
        MFSensorDeviceType_Unknown = 0,
        MFSensorDeviceType_Device = (MFSensorDeviceType_Unknown + 1),
        MFSensorDeviceType_MediaSource = (MFSensorDeviceType_Device + 1),
        MFSensorDeviceType_FrameProvider = (MFSensorDeviceType_MediaSource + 1),
        MFSensorDeviceType_SensorTransform = (MFSensorDeviceType_FrameProvider + 1)
        );

    TMFSensorStreamType = (
        MFSensorStreamType_Unknown = 0,
        MFSensorStreamType_Input = (MFSensorStreamType_Unknown + 1),
        MFSensorStreamType_Output = (MFSensorStreamType_Input + 1)
        );

    TMFSensorDeviceMode = (
        MFSensorDeviceMode_Controller = 0,
        MFSensorDeviceMode_Shared = (MFSensorDeviceMode_Controller + 1)
        );




    IMFSensorDevice = interface(IUnknown)
        ['{FB9F48F2-2A18-4E28-9730-786F30F04DC4}']
        function GetDeviceId(out pDeviceId: ULONGLONG): HResult; stdcall;
        function GetDeviceType(out pType: TMFSensorDeviceType): HResult; stdcall;
        function GetFlags(out pFlags: ULONGLONG): HResult; stdcall;
        function GetSymbolicLink(out SymbolicLink: LPWSTR; cchSymbolicLink: LONG; out pcchWritten: LONG): HResult; stdcall;
        function GetDeviceAttributes(out ppAttributes: IMFAttributes): HResult; stdcall;
        function GetStreamAttributesCount(eType: TMFSensorStreamType; out pdwCount: DWORD): HResult; stdcall;
        function GetStreamAttributes(eType: TMFSensorStreamType; dwIndex: DWORD; out ppAttributes: IMFAttributes): HResult; stdcall;
        function SetSensorDeviceMode(eMode: TMFSensorDeviceMode): HResult; stdcall;
        function GetSensorDeviceMode(out peMode: TMFSensorDeviceMode): HResult; stdcall;
    end;



    IMFSensorGroup = interface(IUnknown)
        ['{4110243A-9757-461F-89F1-F22345BCAB4E}']
        function GetSymbolicLink(out SymbolicLink: LPWSTR; cchSymbolicLink: LONG; out pcchWritten: LONG): HResult; stdcall;
        function GetFlags(out pFlags: ULONGLONG): HResult; stdcall;
        function GetSensorGroupAttributes(out ppAttributes: IMFAttributes): HResult; stdcall;
        function GetSensorDeviceCount(out pdwCount: DWORD): HResult; stdcall;
        function GetSensorDevice(dwIndex: DWORD; out ppDevice: IMFSensorDevice): HResult; stdcall;
        function SetDefaultSensorDeviceIndex(dwIndex: DWORD): HResult; stdcall;
        function GetDefaultSensorDeviceIndex(out pdwIndex: DWORD): HResult; stdcall;
        function CreateMediaSource(out ppSource: IMFMediaSource): HResult; stdcall;
    end;




    IMFSensorStream = interface(IMFAttributes)
        ['{E9A42171-C56E-498A-8B39-EDA5A070B7FC}']
        function GetMediaTypeCount(out pdwCount: DWORD): HResult; stdcall;
        function GetMediaType(dwIndex: DWORD; out ppMediaType: IMFMediaType): HResult; stdcall;
        function CloneSensorStream(out ppStream: IMFSensorStream): HResult; stdcall;
    end;




    IMFSensorTransformFactory = interface(IUnknown)
        ['{EED9C2EE-66B4-4F18-A697-AC7D3960215C}']
        function GetFactoryAttributes(out ppAttributes: IMFAttributes): HResult; stdcall;
        function InitializeFactory(dwMaxTransformCount: DWORD; pSensorDevices: IMFCollection;
            pAttributes: IMFAttributes): HResult; stdcall;
        function GetTransformCount(out pdwCount: DWORD): HResult; stdcall;
        function GetTransformInformation(TransformIndex: DWORD; out pguidTransformId: TGUID; out ppAttributes: IMFAttributes;
            out ppStreamInformation: IMFCollection): HResult; stdcall;
        function CreateTransform(guidSensorTransformID: TREFGUID; pAttributes: IMFAttributes;
            out ppDeviceMFT: IMFDeviceTransform): HResult; stdcall;
    end;

    TSENSORPROFILEID = record
        _Type: TGUID;
        Index: UINT32;
        Unused: UINT32;
    end;
    PSENSORPROFILEID = ^TSENSORPROFILEID;



    IMFSensorProfile = interface(IUnknown)
        ['{22F765D1-8DAB-4107-846D-56BAF72215E7}']
        function GetProfileId(out pId: TSENSORPROFILEID): HResult; stdcall;
        function AddProfileFilter(StreamId: UINT32; wzFilterSetString: LPCWSTR): HResult; stdcall;
        function IsMediaTypeSupported(StreamId: UINT32; pMediaType: IMFMediaType; out pfSupported: boolean): HResult; stdcall;
        function AddBlockedControl(wzBlockedControl: LPCWSTR): HResult; stdcall;
    end;




    IMFSensorProfileCollection = interface(IUnknown)
        ['{C95EA55B-0187-48BE-9353-8D2507662351}']
        function GetProfileCount(): DWORD; stdcall;
        function GetProfile(Index: DWORD; out ppProfile: IMFSensorProfile): HResult; stdcall;
        function AddProfile(pProfile: IMFSensorProfile): HResult; stdcall;
        function FindProfile(ProfileId: PSENSORPROFILEID; out ppProfile: IMFSensorProfile): HResult; stdcall;
        procedure RemoveProfileByIndex(Index: DWORD); stdcall;
        procedure RemoveProfile(ProfileId: PSENSORPROFILEID); stdcall;
    end;


    IMFSensorProcessActivity = interface(IUnknown)
        ['{39DC7F4A-B141-4719-813C-A7F46162A2B8}']
        function GetProcessId(out pPID: ULONG): HResult; stdcall;

        function GetStreamingState(out pfStreaming: boolean): HResult; stdcall;

        function GetStreamingMode(out pMode: TMFSensorDeviceMode): HResult; stdcall;

        function GetReportTime(out pft: TFILETIME): HResult; stdcall;

    end;




    IMFSensorActivityReport = interface(IUnknown)
        ['{3E8C4BE1-A8C2-4528-90DE-2851BDE5FEAD}']
        function GetFriendlyName(out FriendlyName: LPWSTR; cchFriendlyName: ULONG; out pcchWritten: ULONG): HResult; stdcall;
        function GetSymbolicLink(out SymbolicLink: LPWSTR; cchSymbolicLink: ULONG; out pcchWritten: ULONG): HResult; stdcall;
        function GetProcessCount(out pcCount: ULONG): HResult; stdcall;
        function GetProcessActivity(Index: ULONG; out ppProcessActivity: IMFSensorProcessActivity): HResult; stdcall;
    end;




    IMFSensorActivitiesReport = interface(IUnknown)
        ['{683F7A5E-4A19-43CD-B1A9-DBF4AB3F7777}']
        function GetCount(out pcCount: ULONG): HResult; stdcall;
        function GetActivityReport(Index: ULONG; out sensorActivityReport: IMFSensorActivityReport): HResult; stdcall;
        function GetActivityReportByDeviceName(SymbolicName: LPCWSTR; out sensorActivityReport: IMFSensorActivityReport): HResult;
            stdcall;
    end;




    IMFSensorActivitiesReportCallback = interface(IUnknown)
        ['{DE5072EE-DBE3-46DC-8A87-B6F631194751}']
        function OnActivitiesReport(sensorActivitiesReport: IMFSensorActivitiesReport): HResult; stdcall;
    end;




    IMFSensorActivityMonitor = interface(IUnknown)
        ['{D0CEF145-B3F4-4340-A2E5-7A5080CA05CB}']
        function Start(): HResult; stdcall;
        function Stop(): HResult; stdcall;
    end;



    TMFCameraIntrinsic_CameraModel = record
        FocalLength_x: single;
        FocalLength_y: single;
        PrincipalPoint_x: single;
        PrincipalPoint_y: single;
    end;
    PMFCameraIntrinsic_CameraModel = ^TMFCameraIntrinsic_CameraModel;

    TMFCameraIntrinsic_DistortionModel6KT = record
        Radial_k1: single;
        Radial_k2: single;
        Radial_k3: single;
        Radial_k4: single;
        Radial_k5: single;
        Radial_k6: single;
        Tangential_p1: single;
        Tangential_p2: single;
    end;
    PMFCameraIntrinsic_DistortionModel6KT = ^TMFCameraIntrinsic_DistortionModel6KT;

    TMFCameraIntrinsic_DistortionModelArcTan = record
        Radial_k0: single;
        DistortionCenter_x: single;
        DistortionCenter_y: single;
        Tangential_x: single;
        Tangential_y: single;
    end;
    PMFCameraIntrinsic_DistortionModelArcTan = ^TMFCameraIntrinsic_DistortionModelArcTan;

    TMFCameraIntrinsic_DistortionModelType = (
        MFCameraIntrinsic_DistortionModelType_6KT = 0,
        MFCameraIntrinsic_DistortionModelType_ArcTan = (MFCameraIntrinsic_DistortionModelType_6KT + 1)
        );

    TMFExtendedCameraIntrinsic_IntrinsicModel = record
        Width: UINT32;
        Height: UINT32;
        SplitFrameId: UINT32;
        CameraModel: TMFCameraIntrinsic_CameraModel;
    end;
    PMFExtendedCameraIntrinsic_IntrinsicModel = ^TMFExtendedCameraIntrinsic_IntrinsicModel;




    IMFExtendedCameraIntrinsicModel = interface(IUnknown)
        ['{5C595E64-4630-4231-855A-12842F733245}']
        function GetModel(out pIntrinsicModel: TMFExtendedCameraIntrinsic_IntrinsicModel): HResult; stdcall;
        function SetModel(const pIntrinsicModel: TMFExtendedCameraIntrinsic_IntrinsicModel): HResult; stdcall;
        function GetDistortionModelType(out pDistortionModelType: TMFCameraIntrinsic_DistortionModelType): HResult; stdcall;
    end;




    IMFExtendedCameraIntrinsicsDistortionModel6KT = interface(IUnknown)
        ['{74C2653B-5F55-4EB1-9F0F-18B8F68B7D3D}']
        function GetDistortionModel(out pDistortionModel: TMFCameraIntrinsic_DistortionModel6KT): HResult; stdcall;
        function SetDistortionModel(const pDistortionModel: TMFCameraIntrinsic_DistortionModel6KT): HResult; stdcall;
    end;




    IMFExtendedCameraIntrinsicsDistortionModelArcTan = interface(IUnknown)
        ['{812D5F95-B572-45DC-BAFC-AE24199DDDA8}']
        function GetDistortionModel(out pDistortionModel: TMFCameraIntrinsic_DistortionModelArcTan): HResult; stdcall;
        function SetDistortionModel(const pDistortionModel: PMFCameraIntrinsic_DistortionModelArcTan): HResult; stdcall;
    end;




    IMFExtendedCameraIntrinsics = interface(IUnknown)
        ['{687F6DAC-6987-4750-A16A-734D1E7A10FE}']
        function InitializeFromBuffer(pbBuffer {dwBufferSize}: PBYTE; dwBufferSize: DWORD): HResult; stdcall;
        function GetBufferSize(out pdwBufferSize: DWORD): HResult; stdcall;
        function SerializeToBuffer(out pbBuffer: PBYTE; var pdwBufferSize: DWORD): HResult; stdcall;
        function GetIntrinsicModelCount(out pdwCount: DWORD): HResult; stdcall;
        function GetIntrinsicModelByIndex(dwIndex: DWORD; out ppIntrinsicModel: IMFExtendedCameraIntrinsicModel): HResult;
            stdcall;
        function AddIntrinsicModel(pIntrinsicModel: IMFExtendedCameraIntrinsicModel): HResult; stdcall;
    end;




function MFCreateMediaSession(pConfiguration: IMFAttributes; out ppMediaSession: IMFMediaSession): HResult; stdcall; external MF_DLL;
function MFCreatePMPMediaSession(dwCreationFlags: DWORD; pConfiguration: IMFAttributes; out ppMediaSession: IMFMediaSession;
    out ppEnablerActivate: IMFActivate): HResult; stdcall; external MF_DLL;

function MFCreateSourceResolver(out ppISourceResolver: IMFSourceResolver): HResult; stdcall; external MF_DLL;
function CreatePropertyStore(out ppStore: IPropertyStore): HResult; stdcall; external MF_DLL;
function MFGetSupportedSchemes(out pPropVarSchemeArray: TPROPVARIANT): HResult; stdcall; external MF_DLL;
function MFGetSupportedMimeTypes(out pPropVarMimeTypeArray: TPROPVARIANT): HResult; stdcall; external MF_DLL;

function MFCreateTopology(out ppTopo: IMFTopology): HResult; stdcall; external MF_DLL;
function MFCreateTopologyNode(NodeType: TMF_TOPOLOGY_TYPE; out ppNode: IMFTopologyNode): HResult; stdcall; external MF_DLL;
function MFGetTopoNodeCurrentType(pNode: IMFTopologyNode; dwStreamIndex: DWORD; fOutput: boolean; out ppType: IMFMediaType): HResult;
    stdcall; external MF_DLL;
function MFGetService(punkObject: IUnknown; const guidService: TGUID; const riid: TGUID; out ppvObject: pointer): HResult; stdcall; external MF_DLL;
function MFCreatePresentationClock(out ppPresentationClock: IMFPresentationClock): HResult; stdcall; external MF_DLL;
function MFRequireProtectedEnvironment(pPresentationDescriptor: IMFPresentationDescriptor): HResult; stdcall; external MF_DLL;
function MFCreateSimpleTypeHandler(out ppHandler: IMFMediaTypeHandler): HResult; stdcall; external MF_DLL;
function MFShutdownObject(pUnk: IUnknown): HResult; stdcall; external MF_DLL;
function MFCreateAudioRenderer(pAudioAttributes: IMFAttributes; out ppSink: IMFMediaSink): HResult; stdcall; external MF_DLL;
function MFCreateAudioRendererActivate(out ppActivate: IMFActivate): HResult; stdcall; external MF_DLL;
function MFCreateVideoRendererActivate(hwndVideo: HWND; out ppActivate: IMFActivate): HResult; stdcall; external MF_DLL;
function MFCreateMPEG4MediaSink(pIByteStream: IMFByteStream; pVideoMediaType: IMFMediaType; pAudioMediaType: IMFMediaType;
    out ppIMediaSink: IMFMediaSink): HResult; stdcall; external MF_DLL;

function MFCreateMP3MediaSink(pTargetByteStream: IMFByteStream; out ppMediaSink: IMFMediaSink): HResult; stdcall; external MF_DLL;
function MFCreateTopoLoader(out ppObj: IMFTopoLoader): HResult; stdcall; external MF_DLL;
function MFCreateSampleGrabberSinkActivate(pIMFMediaType: IMFMediaType; pIMFSampleGrabberSinkCallback: IMFSampleGrabberSinkCallback;
    out ppIActivate: IMFActivate): HResult; stdcall; external MF_DLL;
function MFCreateStandardQualityManager(out ppQualityManager: IMFQualityManager): HResult; stdcall; external MF_DLL;
function MFCreateSequencerSource(pReserved: IUnknown; out ppSequencerSource: IMFSequencerSource): HResult; stdcall; external MF_DLL;
function MFCreateSequencerSegmentOffset(dwId: TMFSequencerElementId; hnsOffset: TMFTIME; out pvarSegmentOffset: TPROPVARIANT): HResult;
    stdcall; external MF_DLL;
function MFCreateCredentialCache(out ppCache: IMFNetCredentialCache): HResult; stdcall; external MF_DLL;
function MFCreateProxyLocator(pszProtocol: LPCWSTR; pProxyConfig: IPropertyStore; out ppProxyLocator: IMFNetProxyLocator): HResult;
    stdcall; external MF_DLL;
function MFCreateNetSchemePlugin(const riid: TGUID; ppvHandler: pointer): HResult; stdcall; external MF_DLL;
function MFCreateSampleCopierMFT(out ppCopierMFT: IMFTransform): HResult; stdcall; external MF_DLL;
function MFCreateTranscodeProfile(out ppTranscodeProfile: IMFTranscodeProfile): HResult; stdcall; external MF_DLL;
function MFCreateTranscodeTopology(pSrc: IMFMediaSource; pwszOutputFilePath: LPCWSTR; pProfile: IMFTranscodeProfile;
    out ppTranscodeTopo: IMFTopology): HResult; stdcall; external MF_DLL;
function MFTranscodeGetAudioOutputAvailableTypes(const guidSubType: TGUID; dwMFTFlags: DWORD; pCodecConfig: IMFAttributes;
    out ppAvailableTypes: IMFCollection): HResult; stdcall; external MF_DLL;
function MFCreateTranscodeSinkActivate(out ppActivate: IMFActivate): HResult; stdcall; external MF_DLL;
function MFEnumDeviceSources(pAttributes: IMFAttributes; out pppSourceActivate: PIMFActivate; out pcSourceActivate: UINT32): HResult;
    stdcall; external MF_DLL;
function MFCreateDeviceSource(pAttributes: IMFAttributes; out ppSource: IMFMediaSource): HResult; stdcall; external MF_DLL;
function MFCreateDeviceSourceActivate(pAttributes: IMFAttributes; out ppActivate: IMFActivate): HResult; stdcall; external MF_DLL;
function MFCreatePMPServer(dwCreationFlags: DWORD; out ppPMPServer: IMFPMPServer): HResult; stdcall; external MF_DLL;
function CreateNamedPropertyStore(out ppStore: INamedPropertyStore): HResult; stdcall; external MF_DLL;  // ToDo is this the correct DLL ?
function MFCreateRemoteDesktopPlugin(out ppPlugin: IMFRemoteDesktopPlugin): HResult; stdcall; external MF_DLL;

function MFGetSystemTime(): TMFTIME; stdcall; external MFPlat_DLL;

function MFCreateSystemTimeSource(out ppSystemTimeSource: IMFPresentationTimeSource): HResult; stdcall; external MFPlat_DLL;
function MFCreatePresentationDescriptor(cStreamDescriptors: DWORD; apStreamDescriptors: PIMFStreamDescriptor;
    out ppPresentationDescriptor: IMFPresentationDescriptor): HResult; stdcall; external MFPlat_DLL;
function MFSerializePresentationDescriptor(pPD: IMFPresentationDescriptor; out pcbData: DWORD; out ppbData: PBYTE): HResult;
    stdcall; external MFPlat_DLL;
function MFDeserializePresentationDescriptor(cbData: DWORD; pbData: PBYTE; out ppPD: IMFPresentationDescriptor): HResult;
    stdcall; external MFPlat_DLL;
function MFCreateStreamDescriptor(dwStreamIdentifier: DWORD; cMediaTypes: DWORD; apMediaTypes {arraysize cMediaTypes}: PIMFMediaType;
    out ppDescriptor: IMFStreamDescriptor): HResult;
    stdcall; external MFPlat_DLL;
function MFCreateContentDecryptorContext(const guidMediaProtectionSystemId: TGUID; pD3DManager: IMFDXGIDeviceManager;
    pContentProtectionDevice: IMFContentProtectionDevice; out ppContentDecryptorContext: IMFContentDecryptorContext): HResult;
    stdcall; external MFPlat_DLL;

function MFCreateTranscodeTopologyFromByteStream(pSrc: IMFMediaSource; pOutputStream: IMFByteStream;
    pProfile: IMFTranscodeProfile; out ppTranscodeTopo: IMFTopology): HResult; stdcall; external MF_DLL;

function MFCreateProtectedEnvironmentAccess(out ppAccess: IMFProtectedEnvironmentAccess): HResult; stdcall; external MF_DLL;

function MFLoadSignedLibrary(pszName: LPCWSTR; out ppLib: IMFSignedLibrary): HResult; stdcall; external MF_DLL;
function MFGetSystemId(out ppId: IMFSystemId): HResult; stdcall; external MF_DLL;
function MFGetLocalId(const verifier: PBYTE; size: UINT32; out id: LPWSTR): HResult; stdcall; external MF_DLL;
function MFCreateContentProtectionDevice(const ProtectionSystemId: TGUID; out ContentProtectionDevice: IMFContentProtectionDevice): HResult; stdcall;
    external MFPlat_DLL;
function MFCheckContentProtectionDevice(const ProtectionSystemId: TGUID): HResult; stdcall; external MFPlat_DLL;
function MFIsContentProtectionDeviceSupported(const ProtectionSystemId: TGUID; out isSupported: boolean): HResult; stdcall; external MFPlat_DLL;

function MFCreateTrackedSample(out ppMFSample: IMFTrackedSample): HResult; stdcall; external MFPlat_DLL;
function MFCreateMFByteStreamOnStream(pStream: IStream; out ppByteStream: IMFByteStream): HResult; stdcall; external MFPlat_DLL;
function MFCreateStreamOnMFByteStream(pByteStream: IMFByteStream; out ppStream: IStream): HResult; stdcall; external MFPlat_DLL;
function MFCreateMFByteStreamOnStreamEx(punkStream: IUnknown; out ppByteStream: IMFByteStream): HResult; stdcall; external MFPlat_DLL;
function MFCreateStreamOnMFByteStreamEx(pByteStream: IMFByteStream; const riid: TGUID; out ppv): HResult; stdcall; external MFPlat_DLL;
function MFCreateMediaTypeFromProperties(punkStream: IUnknown; out ppMediaType: IMFMediaType): HResult; stdcall; external MFPlat_DLL;
function MFCreatePropertiesFromMediaType(pMediaType: IMFMediaType; const riid: TGUID; out ppv): HResult; stdcall; external MFPlat_DLL;

function MFCreate3GPMediaSink(pIByteStream: IMFByteStream; pVideoMediaType: IMFMediaType; pAudioMediaType: IMFMediaType;
    out ppIMediaSink: IMFMediaSink): HResult; stdcall; external MF_DLL;
function MFCreateAC3MediaSink(pTargetByteStream: IMFByteStream; pAudioMediaType: IMFMediaType; out ppMediaSink: IMFMediaSink): HResult; stdcall;
    external MF_DLL;
function MFCreateADTSMediaSink(pTargetByteStream: IMFByteStream; pAudioMediaType: IMFMediaType; out ppMediaSink: IMFMediaSink): HResult; stdcall;
    external MF_DLL;
function MFCreateMuxSink(guidOutputSubType: TGUID; pOutputAttributes: IMFAttributes; pOutputByteStream: IMFByteStream;
    out ppMuxSink: IMFMediaSink): HResult;
    stdcall; external MF_DLL;
function MFCreateFMPEG4MediaSink(pIByteStream: IMFByteStream; pVideoMediaType: IMFMediaType; pAudioMediaType: IMFMediaType;
    out ppIMediaSink: IMFMediaSink): HResult; stdcall; external MF_DLL;
function MFCreateAVIMediaSink(pIByteStream: IMFByteStream; pVideoMediaType: IMFMediaType; pAudioMediaType: IMFMediaType;
    out ppIMediaSink: IMFMediaSink): HResult; stdcall; external MF_DLL;
function MFCreateWAVEMediaSink(pTargetByteStream: IMFByteStream; pAudioMediaType: IMFMediaType; out ppMediaSink: IMFMediaSink): HResult; stdcall;
    external MF_DLL;
function MFCreateAggregateSource(pSourceCollection: IMFCollection; out ppAggSource: IMFMediaSource): HResult; stdcall; external MF_DLL;




function MFCreateSensorGroup(SensorGroupSymbolicLink: LPCWSTR; out ppSensorGroup: IMFSensorGroup): HResult; stdcall; external MFSENSORGROUP_DLL;
function MFCreateSensorStream(StreamId: DWORD; pAttributes: IMFAttributes; pMediaTypeCollection: IMFCollection;
    out ppStream: IMFSensorStream): HResult; stdcall; external MFSENSORGROUP_DLL;
function MFCreateSensorProfile(ProfileType: PGUID; ProfileIndex: UINT32; Constraints: LPCWSTR; out ppProfile: IMFSensorProfile): HResult;
    stdcall; external MFSENSORGROUP_DLL;
function MFCreateSensorProfileCollection(out ppSensorProfile: IMFSensorProfileCollection): HResult; stdcall; external MFSENSORGROUP_DLL;
function MFCreateSensorActivityMonitor(pCallback: IMFSensorActivitiesReportCallback; out ppActivityMonitor: IMFSensorActivityMonitor): HResult;
    stdcall; external MFSENSORGROUP_DLL;

//{$if (NTDDI_VERSION >= NTDDI_WIN10_RS5)}
function MFCreateExtendedCameraIntrinsics(out ppExtendedCameraIntrinsics: IMFExtendedCameraIntrinsics): HResult; stdcall; external xxx_dll;
function MFCreateExtendedCameraIntrinsicModel(const distortionModelType: TMFCameraIntrinsic_DistortionModelType;
    out ppExtendedCameraIntrinsicModel: IMFExtendedCameraIntrinsicModel): HResult; stdcall; external xxx_dll;



{ Helper function }

function MAKE_MFPROTECTIONDATA_DISABLE(Disable: boolean): DWORD;
function EXTRACT_MFPROTECTIONDATA_DISABLE_ON(Data: DWORD): boolean;
function EXTRACT_MFPROTECTIONDATA_DISABLE_RESERVED(Data: DWORD): DWORD;
function MAKE_MFPROTECTIONDATA_CONSTRICTAUDIO(Level: DWORD): DWORD;
function EXTRACT_MFPROTECTIONDATA_CONSTRICTAUDIO_LEVEL(Data: DWORD): DWORD;
function EXTRACT_MFPROTECTIONDATA_CONSTRICTAUDIO_RESERVED(Data: DWORD): DWORD;
function MAKE_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS(TestCertificateEnable, DigitalOutputDisable: boolean; DrmLevel: DWORD): DWORD;
function MAKE_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS2(TestCertificateEnable, DigitalOutputDisable, CopyOK: boolean; DrmLevel: DWORD): DWORD;
function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_DRMLEVEL(Data: DWORD): DWORD;
function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_DIGITALOUTPUTDISABLE(Data: DWORD): boolean;
function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_TESTCERTIFICATEENABLE(Data: DWORD): boolean;
function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_COPYOK(Data: DWORD): boolean;
function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_RESERVED(Data: DWORD): DWORD;

implementation



function MAKE_MFPROTECTIONDATA_DISABLE(Disable: boolean): DWORD;
begin
    if Disable then
        Result := $00000001
    else
        Result := 0;
end;



function EXTRACT_MFPROTECTIONDATA_DISABLE_ON(Data: DWORD): boolean;
begin
    Result := ((Data and $00000001) <> 0);
end;



function EXTRACT_MFPROTECTIONDATA_DISABLE_RESERVED(Data: DWORD): DWORD;
begin
    Result := ((Data and $FFFFFFFE) shr 1);
end;



function MAKE_MFPROTECTIONDATA_CONSTRICTAUDIO(Level: DWORD): DWORD;
begin
    Result := Level;
end;



function EXTRACT_MFPROTECTIONDATA_CONSTRICTAUDIO_LEVEL(Data: DWORD): DWORD;
begin
    Result := Data and $000000FF;
end;



function EXTRACT_MFPROTECTIONDATA_CONSTRICTAUDIO_RESERVED(Data: DWORD): DWORD;
begin
    Result := (Data and $FFFFFF00) shr 8;
end;



function MAKE_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS(TestCertificateEnable, DigitalOutputDisable: boolean; DrmLevel: DWORD): DWORD;
begin
    Result := 0;
    if TestCertificateEnable then
        Result := $00020000;
    if DigitalOutputDisable then
        Result := Result or $00010000;
    Result := Result or DrmLevel;
end;



function MAKE_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS2(TestCertificateEnable, DigitalOutputDisable, CopyOK: boolean; DrmLevel: DWORD): DWORD;
begin
    Result := 0;
    if TestCertificateEnable then
        Result := $00020000;
    if DigitalOutputDisable then
        Result := Result or $00010000;
    if CopyOK then
        Result := Result or $00040000;
    Result := Result or DrmLevel;
end;



function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_DRMLEVEL(Data: DWORD): DWORD;
begin
    Result := (Data and $0000FFFF);
end;



function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_DIGITALOUTPUTDISABLE(Data: DWORD): boolean;
begin
    Result := (0 <> (Data and $00010000));
end;



function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_TESTCERTIFICATEENABLE(Data: DWORD): boolean;
begin
    Result := (0 <> (Data and $00020000));
end;



function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_COPYOK(Data: DWORD): boolean;
begin
    Result := (0 <> (Data and $00040000));
end;



function EXTRACT_MFPROTECTIONDATA_TRUSTEDAUDIODRIVERS_RESERVED(Data: DWORD): DWORD;
begin
    {$IF  (WINVER >= _WIN32_WINNT_WIN7)}
    Result := ((Data and $FFF80000) shr 19);
    {$ELSE}
    Result := ((Data and $FFF80000) shr 18);
    {$ENDIF}
end;

end.
